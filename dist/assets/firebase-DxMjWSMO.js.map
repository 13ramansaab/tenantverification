{"version":3,"file":"firebase-DxMjWSMO.js","sources":["../../node_modules/@firebase/util/dist/index.esm2017.js","../../node_modules/@firebase/component/dist/esm/index.esm2017.js","../../node_modules/@firebase/logger/dist/esm/index.esm2017.js","../../node_modules/idb/build/wrap-idb-value.js","../../node_modules/idb/build/index.js","../../node_modules/@firebase/app/dist/esm/index.esm2017.js","../../node_modules/@firebase/database/dist/index.esm2017.js","../../node_modules/@firebase/storage/dist/index.esm2017.js","../../node_modules/firebase/app/dist/esm/index.esm.js"],"sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw new DecodeBase64StringError();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * An error encountered while decoding base64 string.\r\n */\r\nclass DecodeBase64StringError extends Error {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = 'DecodeBase64StringError';\r\n    }\r\n}\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n * @public\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;\r\n/**\r\n * Attempt to read defaults from a JSON string provided to\r\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\r\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\r\n * The dots are in parens because certain compilers (Vite?) cannot\r\n * handle seeing that variable in comments.\r\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\r\n */\r\nconst getDefaultsFromEnvVariable = () => {\r\n    if (typeof process === 'undefined' || typeof process.env === 'undefined') {\r\n        return;\r\n    }\r\n    const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\r\n    if (defaultsJsonString) {\r\n        return JSON.parse(defaultsJsonString);\r\n    }\r\n};\r\nconst getDefaultsFromCookie = () => {\r\n    if (typeof document === 'undefined') {\r\n        return;\r\n    }\r\n    let match;\r\n    try {\r\n        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\r\n    }\r\n    catch (e) {\r\n        // Some environments such as Angular Universal SSR have a\r\n        // `document` object but error on accessing `document.cookie`.\r\n        return;\r\n    }\r\n    const decoded = match && base64Decode(match[1]);\r\n    return decoded && JSON.parse(decoded);\r\n};\r\n/**\r\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\r\n * (1) if such an object exists as a property of `globalThis`\r\n * (2) if such an object was provided on a shell environment variable\r\n * (3) if such an object exists in a cookie\r\n * @public\r\n */\r\nconst getDefaults = () => {\r\n    try {\r\n        return (getDefaultsFromGlobal() ||\r\n            getDefaultsFromEnvVariable() ||\r\n            getDefaultsFromCookie());\r\n    }\r\n    catch (e) {\r\n        /**\r\n         * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\r\n         * to any environment case we have not accounted for. Log to\r\n         * info instead of swallowing so we can find these unknown cases\r\n         * and add paths for them if needed.\r\n         */\r\n        console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\r\n        return;\r\n    }\r\n};\r\n/**\r\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\r\n * @public\r\n */\r\nconst getDefaultEmulatorHost = (productName) => { var _a, _b; return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName]; };\r\n/**\r\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\r\n * @public\r\n */\r\nconst getDefaultEmulatorHostnameAndPort = (productName) => {\r\n    const host = getDefaultEmulatorHost(productName);\r\n    if (!host) {\r\n        return undefined;\r\n    }\r\n    const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\r\n    if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\r\n        throw new Error(`Invalid host ${host} with no separate hostname and port!`);\r\n    }\r\n    // eslint-disable-next-line no-restricted-globals\r\n    const port = parseInt(host.substring(separatorIndex + 1), 10);\r\n    if (host[0] === '[') {\r\n        // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\r\n        return [host.substring(1, separatorIndex - 1), port];\r\n    }\r\n    else {\r\n        return [host.substring(0, separatorIndex), port];\r\n    }\r\n};\r\n/**\r\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\r\n * @public\r\n */\r\nconst getDefaultAppConfig = () => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config; };\r\n/**\r\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\r\n * prefixed by \"_\")\r\n * @public\r\n */\r\nconst getExperimentalSetting = (name) => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a[`_${name}`]; };\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promisified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected or specified.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    var _a;\r\n    const forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;\r\n    if (forceEnvironment === 'node') {\r\n        return true;\r\n    }\r\n    else if (forceEnvironment === 'browser') {\r\n        return false;\r\n    }\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment.\r\n * Note: This will return true for certain test frameworks that are incompletely\r\n * mimicking a browser, and should not lead to assuming all browser APIs are\r\n * available.\r\n */\r\nfunction isBrowser() {\r\n    return typeof window !== 'undefined' || isWebWorker();\r\n}\r\n/**\r\n * Detect Web Worker context.\r\n */\r\nfunction isWebWorker() {\r\n    return (typeof WorkerGlobalScope !== 'undefined' &&\r\n        typeof self !== 'undefined' &&\r\n        self instanceof WorkerGlobalScope);\r\n}\r\n/**\r\n * Detect Cloudflare Worker context.\r\n */\r\nfunction isCloudflareWorker() {\r\n    return (typeof navigator !== 'undefined' &&\r\n        navigator.userAgent === 'Cloudflare-Workers');\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        !!navigator.userAgent &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    try {\r\n        return typeof indexedDB === 'object';\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // TypeScript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data JavaScript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\r\n * @internal\r\n */\r\nfunction promiseWithTimeout(promise, timeInMS = 2000) {\r\n    const deferredPromise = new Deferred();\r\n    setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);\r\n    promise.then(deferredPromise.resolve, deferredPromise.reject);\r\n    return deferredPromise.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber synchronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in JavaScript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n * Generates a new uuid.\r\n * @public\r\n */\r\nconst uuidv4 = function () {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\r\n        const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, DecodeBase64StringError, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getDefaultAppConfig, getDefaultEmulatorHost, getDefaultEmulatorHostnameAndPort, getDefaults, getExperimentalSetting, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isCloudflareWorker, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, isWebWorker, issuedAtTime, jsonEval, map, ordinal, promiseWithTimeout, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, uuidv4, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* InstantiationMode.LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide multiple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/cannot be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* InstantiationMode.EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* InstantiationMode.EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, getDefaultAppConfig, deepEqual, isBrowser, isWebWorker, FirebaseError, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* ComponentType.VERSION */;\r\n}\n\nconst name$q = \"@firebase/app\";\nconst version$1 = \"0.10.13\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$p = \"@firebase/app-compat\";\n\nconst name$o = \"@firebase/analytics-compat\";\n\nconst name$n = \"@firebase/analytics\";\n\nconst name$m = \"@firebase/app-check-compat\";\n\nconst name$l = \"@firebase/app-check\";\n\nconst name$k = \"@firebase/auth\";\n\nconst name$j = \"@firebase/auth-compat\";\n\nconst name$i = \"@firebase/database\";\n\nconst name$h = \"@firebase/data-connect\";\n\nconst name$g = \"@firebase/database-compat\";\n\nconst name$f = \"@firebase/functions\";\n\nconst name$e = \"@firebase/functions-compat\";\n\nconst name$d = \"@firebase/installations\";\n\nconst name$c = \"@firebase/installations-compat\";\n\nconst name$b = \"@firebase/messaging\";\n\nconst name$a = \"@firebase/messaging-compat\";\n\nconst name$9 = \"@firebase/performance\";\n\nconst name$8 = \"@firebase/performance-compat\";\n\nconst name$7 = \"@firebase/remote-config\";\n\nconst name$6 = \"@firebase/remote-config-compat\";\n\nconst name$5 = \"@firebase/storage\";\n\nconst name$4 = \"@firebase/storage-compat\";\n\nconst name$3 = \"@firebase/firestore\";\n\nconst name$2 = \"@firebase/vertexai-preview\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"10.14.1\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$q]: 'fire-core',\r\n    [name$p]: 'fire-core-compat',\r\n    [name$n]: 'fire-analytics',\r\n    [name$o]: 'fire-analytics-compat',\r\n    [name$l]: 'fire-app-check',\r\n    [name$m]: 'fire-app-check-compat',\r\n    [name$k]: 'fire-auth',\r\n    [name$j]: 'fire-auth-compat',\r\n    [name$i]: 'fire-rtdb',\r\n    [name$h]: 'fire-data-connect',\r\n    [name$g]: 'fire-rtdb-compat',\r\n    [name$f]: 'fire-fn',\r\n    [name$e]: 'fire-fn-compat',\r\n    [name$d]: 'fire-iid',\r\n    [name$c]: 'fire-iid-compat',\r\n    [name$b]: 'fire-fcm',\r\n    [name$a]: 'fire-fcm-compat',\r\n    [name$9]: 'fire-perf',\r\n    [name$8]: 'fire-perf-compat',\r\n    [name$7]: 'fire-rc',\r\n    [name$6]: 'fire-rc-compat',\r\n    [name$5]: 'fire-gcs',\r\n    [name$4]: 'fire-gcs-compat',\r\n    [name$3]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    [name$2]: 'fire-vertex',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * @internal\r\n */\r\nconst _serverApps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    for (const serverApp of _serverApps.values()) {\r\n        _addComponent(serverApp, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n *\r\n * @param obj - an object of type FirebaseApp or FirebaseOptions.\r\n *\r\n * @returns true if the provide object is of type FirebaseApp.\r\n *\r\n * @internal\r\n */\r\nfunction _isFirebaseApp(obj) {\r\n    return obj.options !== undefined;\r\n}\r\n/**\r\n *\r\n * @param obj - an object of type FirebaseApp.\r\n *\r\n * @returns true if the provided object is of type FirebaseServerAppImpl.\r\n *\r\n * @internal\r\n */\r\nfunction _isFirebaseServerApp(obj) {\r\n    return obj.settings !== undefined;\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* AppError.NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call initializeApp() first',\r\n    [\"bad-app-name\" /* AppError.BAD_APP_NAME */]: \"Illegal App name: '{$appName}'\",\r\n    [\"duplicate-app\" /* AppError.DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* AppError.APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"server-app-deleted\" /* AppError.SERVER_APP_DELETED */]: 'Firebase Server App has been deleted',\r\n    [\"no-options\" /* AppError.NO_OPTIONS */]: 'Need to provide options, when not being deployed to hosting via source.',\r\n    [\"invalid-app-argument\" /* AppError.INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"idb-open\" /* AppError.IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-get\" /* AppError.IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-set\" /* AppError.IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-delete\" /* AppError.IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"finalization-registry-not-supported\" /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */]: 'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',\r\n    [\"invalid-server-app-environment\" /* AppError.INVALID_SERVER_APP_ENVIRONMENT */]: 'FirebaseServerApp is not for use in browser environments.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* ComponentType.PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* AppError.APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseServerAppImpl extends FirebaseAppImpl {\r\n    constructor(options, serverConfig, name, container) {\r\n        // Build configuration parameters for the FirebaseAppImpl base class.\r\n        const automaticDataCollectionEnabled = serverConfig.automaticDataCollectionEnabled !== undefined\r\n            ? serverConfig.automaticDataCollectionEnabled\r\n            : false;\r\n        // Create the FirebaseAppSettings object for the FirebaseAppImp constructor.\r\n        const config = {\r\n            name,\r\n            automaticDataCollectionEnabled\r\n        };\r\n        if (options.apiKey !== undefined) {\r\n            // Construct the parent FirebaseAppImp object.\r\n            super(options, config, container);\r\n        }\r\n        else {\r\n            const appImpl = options;\r\n            super(appImpl.options, config, container);\r\n        }\r\n        // Now construct the data for the FirebaseServerAppImpl.\r\n        this._serverConfig = Object.assign({ automaticDataCollectionEnabled }, serverConfig);\r\n        this._finalizationRegistry = null;\r\n        if (typeof FinalizationRegistry !== 'undefined') {\r\n            this._finalizationRegistry = new FinalizationRegistry(() => {\r\n                this.automaticCleanup();\r\n            });\r\n        }\r\n        this._refCount = 0;\r\n        this.incRefCount(this._serverConfig.releaseOnDeref);\r\n        // Do not retain a hard reference to the dref object, otherwise the FinalizationRegistry\r\n        // will never trigger.\r\n        this._serverConfig.releaseOnDeref = undefined;\r\n        serverConfig.releaseOnDeref = undefined;\r\n        registerVersion(name$q, version$1, 'serverapp');\r\n    }\r\n    toJSON() {\r\n        return undefined;\r\n    }\r\n    get refCount() {\r\n        return this._refCount;\r\n    }\r\n    // Increment the reference count of this server app. If an object is provided, register it\r\n    // with the finalization registry.\r\n    incRefCount(obj) {\r\n        if (this.isDeleted) {\r\n            return;\r\n        }\r\n        this._refCount++;\r\n        if (obj !== undefined && this._finalizationRegistry !== null) {\r\n            this._finalizationRegistry.register(obj, this);\r\n        }\r\n    }\r\n    // Decrement the reference count.\r\n    decRefCount() {\r\n        if (this.isDeleted) {\r\n            return 0;\r\n        }\r\n        return --this._refCount;\r\n    }\r\n    // Invoked by the FinalizationRegistry callback to note that this app should go through its\r\n    // reference counts and delete itself if no reference count remain. The coordinating logic that\r\n    // handles this is in deleteApp(...).\r\n    automaticCleanup() {\r\n        void deleteApp(this);\r\n    }\r\n    get settings() {\r\n        this.checkDestroyed();\r\n        return this._serverConfig;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"server-app-deleted\" /* AppError.SERVER_APP_DELETED */);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(_options, rawConfig = {}) {\r\n    let options = _options;\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* AppError.BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    options || (options = getDefaultAppConfig());\r\n    if (!options) {\r\n        throw ERROR_FACTORY.create(\"no-options\" /* AppError.NO_OPTIONS */);\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* AppError.DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\nfunction initializeServerApp(_options, _serverAppConfig) {\r\n    if (isBrowser() && !isWebWorker()) {\r\n        // FirebaseServerApp isn't designed to be run in browsers.\r\n        throw ERROR_FACTORY.create(\"invalid-server-app-environment\" /* AppError.INVALID_SERVER_APP_ENVIRONMENT */);\r\n    }\r\n    if (_serverAppConfig.automaticDataCollectionEnabled === undefined) {\r\n        _serverAppConfig.automaticDataCollectionEnabled = false;\r\n    }\r\n    let appOptions;\r\n    if (_isFirebaseApp(_options)) {\r\n        appOptions = _options.options;\r\n    }\r\n    else {\r\n        appOptions = _options;\r\n    }\r\n    // Build an app name based on a hash of the configuration options.\r\n    const nameObj = Object.assign(Object.assign({}, _serverAppConfig), appOptions);\r\n    // However, Do not mangle the name based on releaseOnDeref, since it will vary between the\r\n    // construction of FirebaseServerApp instances. For example, if the object is the request headers.\r\n    if (nameObj.releaseOnDeref !== undefined) {\r\n        delete nameObj.releaseOnDeref;\r\n    }\r\n    const hashCode = (s) => {\r\n        return [...s].reduce((hash, c) => (Math.imul(31, hash) + c.charCodeAt(0)) | 0, 0);\r\n    };\r\n    if (_serverAppConfig.releaseOnDeref !== undefined) {\r\n        if (typeof FinalizationRegistry === 'undefined') {\r\n            throw ERROR_FACTORY.create(\"finalization-registry-not-supported\" /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */, {});\r\n        }\r\n    }\r\n    const nameString = '' + hashCode(JSON.stringify(nameObj));\r\n    const existingApp = _serverApps.get(nameString);\r\n    if (existingApp) {\r\n        existingApp.incRefCount(_serverAppConfig.releaseOnDeref);\r\n        return existingApp;\r\n    }\r\n    const container = new ComponentContainer(nameString);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseServerAppImpl(appOptions, _serverAppConfig, nameString, container);\r\n    _serverApps.set(nameString, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\r\n        return initializeApp();\r\n    }\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* AppError.NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    let cleanupProviders = false;\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        cleanupProviders = true;\r\n        _apps.delete(name);\r\n    }\r\n    else if (_serverApps.has(name)) {\r\n        const firebaseServerApp = app;\r\n        if (firebaseServerApp.decRefCount() <= 0) {\r\n            _serverApps.delete(name);\r\n            cleanupProviders = true;\r\n        }\r\n    }\r\n    if (cleanupProviders) {\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* ComponentType.VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DB_NAME, DB_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        try {\r\n                            db.createObjectStore(STORE_NAME);\r\n                        }\r\n                        catch (e) {\r\n                            // Safari/iOS browsers throw occasional exceptions on\r\n                            // db.createObjectStore() that may be a bug. Avoid blocking\r\n                            // the rest of the app functionality.\r\n                            console.warn(e);\r\n                        }\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"idb-open\" /* AppError.IDB_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME);\r\n        const result = await tx.objectStore(STORE_NAME).get(computeKey(app));\r\n        // We already have the value but tx.done can throw,\r\n        // so we need to await it here to catch errors\r\n        await tx.done;\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-get\" /* AppError.IDB_GET */, {\r\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        await tx.done;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-set\" /* AppError.IDB_WRITE */, {\r\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        var _a, _b;\r\n        try {\r\n            const platformLogger = this.container\r\n                .getProvider('platform-logger')\r\n                .getImmediate();\r\n            // This is the \"Firebase user agent\" string from the platform logger\r\n            // service, not the browser user agent.\r\n            const agent = platformLogger.getPlatformInfoString();\r\n            const date = getUTCDateString();\r\n            if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null) {\r\n                this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n                // If we failed to construct a heartbeats cache, then return immediately.\r\n                if (((_b = this._heartbeatsCache) === null || _b === void 0 ? void 0 : _b.heartbeats) == null) {\r\n                    return;\r\n                }\r\n            }\r\n            // Do not store a heartbeat if one is already stored for this day\r\n            // or if a header has already been sent today.\r\n            if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\r\n                this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n                return;\r\n            }\r\n            else {\r\n                // There is no entry for this date. Create one.\r\n                this._heartbeatsCache.heartbeats.push({ date, agent });\r\n            }\r\n            // Remove entries older than 30 days.\r\n            this._heartbeatsCache.heartbeats =\r\n                this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\r\n                    const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n                    const now = Date.now();\r\n                    return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n                });\r\n            return this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        catch (e) {\r\n            logger.warn(e);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        var _a;\r\n        try {\r\n            if (this._heartbeatsCache === null) {\r\n                await this._heartbeatsCachePromise;\r\n            }\r\n            // If it's still null or the array is empty, there is no data to send.\r\n            if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null ||\r\n                this._heartbeatsCache.heartbeats.length === 0) {\r\n                return '';\r\n            }\r\n            const date = getUTCDateString();\r\n            // Extract as many heartbeats from the cache as will fit under the size limit.\r\n            const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\r\n            const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n            // Store last sent date to prevent another being logged/sent for the same day.\r\n            this._heartbeatsCache.lastSentHeartbeatDate = date;\r\n            if (unsentEntries.length > 0) {\r\n                // Store any unsent entries if they exist.\r\n                this._heartbeatsCache.heartbeats = unsentEntries;\r\n                // This seems more likely than emptying the array (below) to lead to some odd state\r\n                // since the cache isn't empty and this will be called again on the next request,\r\n                // and is probably safest if we await it.\r\n                await this._storage.overwrite(this._heartbeatsCache);\r\n            }\r\n            else {\r\n                this._heartbeatsCache.heartbeats = [];\r\n                // Do not wait for this, to reduce latency.\r\n                void this._storage.overwrite(this._heartbeatsCache);\r\n            }\r\n            return headerString;\r\n        }\r\n        catch (e) {\r\n            logger.warn(e);\r\n            return '';\r\n        }\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                agent: singleDateHeartbeat.agent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return { heartbeats: [] };\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            if (idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats) {\r\n                return idbHeartbeatObject;\r\n            }\r\n            else {\r\n                return { heartbeats: [] };\r\n            }\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: heartbeatsObject.heartbeats\r\n            });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: [\r\n                    ...existingHeartbeatsObject.heartbeats,\r\n                    ...heartbeatsObject.heartbeats\r\n                ]\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64urlEncodeWithoutPadding(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$q, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$q, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _isFirebaseApp, _isFirebaseServerApp, _registerComponent, _removeServiceInstance, _serverApps, deleteApp, getApp, getApps, initializeApp, initializeServerApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","import { _getProvider, getApp, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component, ComponentContainer, Provider } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, stringToByteArray, Sha1, base64, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, getDefaultEmulatorHostnameAndPort, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"1.0.8\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a JavaScript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in keys, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\r\n    if (typeof timeout === 'number' &&\r\n        // @ts-ignore Is only defined in Deno environments.\r\n        typeof Deno !== 'undefined' &&\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno['unrefTimer']) {\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno.unrefTimer(timeout);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    }\r\n    else if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false, isUsingEmulator = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this.isUsingEmulator = isUsingEmulator;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are received from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\r\n            this.myIFrame.doc.body.textContent = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        if (applicationId) {\r\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            let options;\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n            }\r\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    /**\r\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n     * TransportManager has already set up transports_\r\n     */\r\n    static get IS_TRANSPORT_INITIALIZED() {\r\n        return this.globalTransportInitialized_;\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n            TransportManager.globalTransportInitialized_ = true;\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Keeps track of whether the TransportManager has already chosen a transport to use\r\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* RealtimeState.CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                const handshakePayload = Object.assign({}, payload);\r\n                if (this.repoInfo_.isUsingEmulator) {\r\n                    // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\r\n                    handshakePayload.h = this.repoInfo_.host;\r\n                }\r\n                this.onHandshake_(handshakePayload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* RealtimeState.CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* RealtimeState.CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* RealtimeState.CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* RealtimeState.DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent of (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* ChangeType.VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* ChangeType.CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* ChangeType.CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* ChangeType.CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* ChangeType.CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n        this.startIsInclusive_ = !params.startAfterSet_;\r\n        this.endIsInclusive_ = !params.endBeforeSet_;\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        const isWithinStart = this.startIsInclusive_\r\n            ? this.index_.compare(this.getStartPost(), node) <= 0\r\n            : this.index_.compare(this.getStartPost(), node) < 0;\r\n        const isWithinEnd = this.endIsInclusive_\r\n            ? this.index_.compare(node, this.getEndPost()) <= 0\r\n            : this.index_.compare(node, this.getEndPost()) < 0;\r\n        return isWithinStart && isWithinEnd;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.withinDirectionalStart = (node) => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\r\n        this.withinDirectionalEnd = (node) => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\r\n        this.withinStartPost = (node) => {\r\n            const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);\r\n            return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\r\n        };\r\n        this.withinEndPost = (node) => {\r\n            const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());\r\n            return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\r\n        };\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n        this.startIsInclusive_ = !params.startAfterSet_;\r\n        this.endIsInclusive_ = !params.endBeforeSet_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    if (!this.withinDirectionalStart(next)) {\r\n                        // if we have not reached the start, skip to the next element\r\n                        continue;\r\n                    }\r\n                    else if (!this.withinDirectionalEnd(next)) {\r\n                        // if we have reached the end, stop adding elements\r\n                        break;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    const inRange = count < this.limit_ &&\r\n                        this.withinDirectionalStart(next) &&\r\n                        this.withinDirectionalEnd(next);\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false; // can only be true if startSet_ is true\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false; // can only be true if endSet_ is true\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.startAfterSet_ = this.startAfterSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.endBeforeSet_ = this.endBeforeSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX || !!key) {\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX || !!key) {\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* REST_QUERY_CONSTANTS.VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* REST_QUERY_CONSTANTS.KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* REST_QUERY_CONSTANTS.ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        const startParam = queryParams.startAfterSet_\r\n            ? \"startAfter\" /* REST_QUERY_CONSTANTS.START_AFTER */\r\n            : \"startAt\" /* REST_QUERY_CONSTANTS.START_AT */;\r\n        qs[startParam] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[startParam] += ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        const endParam = queryParams.endBeforeSet_\r\n            ? \"endBefore\" /* REST_QUERY_CONSTANTS.END_BEFORE */\r\n            : \"endAt\" /* REST_QUERY_CONSTANTS.END_AT */;\r\n        qs[endParam] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[endParam] += ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n        obj[\"sin\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */] =\r\n            !queryParams.startAfterSet_;\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n        obj[\"ein\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */] =\r\n            !queryParams.endBeforeSet_;\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* WIRE_PROTOCOL_CONSTANTS.INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* ChangeType.CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* ChangeType.CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* ChangeType.CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* ChangeType.CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* ChangeType.VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* ChangeType.CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* ChangeType.CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* ChangeType.CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* ChangeType.CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === null;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\r\n *  deduping needs to take place. This flag allows toggling of that behavior\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        if (!skipListenerDedup) {\r\n            /**\r\n             * We may have just removed one of many listeners and can short-circuit this whole process\r\n             * We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n             * properly set up.\r\n             */\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            const removingDefault = -1 !==\r\n                removed.findIndex(query => {\r\n                    return query._queryParams.loadsAllData();\r\n                });\r\n            const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n            if (removingDefault && !covered) {\r\n                const subtree = syncTree.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (let i = 0; i < newViews.length; ++i) {\r\n                        const view = newViews[i], newQuery = view.query;\r\n                        const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                        syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n                // Otherwise there's nothing below us, so nothing we need to start listening on\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    const defaultTag = null;\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach((queryToRemove) => {\r\n                        const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whether the tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will wait until the\r\n *  repo has established a connection and then request the value for `query`.\r\n * If the client is not able to retrieve the query result for another reason,\r\n * it reports an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query, eventRegistration) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        /**\r\n         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\r\n         * Add an event registration,\r\n         * Update data at the path,\r\n         * Raise any events,\r\n         * Cleanup the SyncTree\r\n         */\r\n        syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\r\n        let events;\r\n        if (query._queryParams.loadsAllData()) {\r\n            events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        }\r\n        else {\r\n            const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\r\n        }\r\n        /*\r\n         * We need to raise events in the scenario where `get()` is called at a parent path, and\r\n         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\r\n         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\r\n         * and its corresponding serverCache, including the child location where `onValue` is called. Then,\r\n         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\r\n         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\r\n         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\r\n         * ensure the corresponding child events will get fired.\r\n         */\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n        syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\r\n        return node;\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* TransactionStatus.RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* TransactionStatus.RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* TransactionStatus.SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* TransactionStatus.RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* TransactionStatus.RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* TransactionStatus.RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* TransactionStatus.SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `IteratedDataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\r\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thenablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thenablePushRef.then = promise.then.bind(promise);\r\n    thenablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thenablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    const callbackContext = new CallbackContext(() => { });\r\n    const container = new ValueEventRegistration(callbackContext);\r\n    return repoGetValue(query._repo, query, container).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'endAt';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'endBefore';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value less than or equal\r\n * to the specified value and a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'startAt';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'startAfter';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n        this.type = 'limitToFirst';\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n        this.type = 'limitToLast';\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n        this.type = 'orderByChild';\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'orderByKey';\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'orderByPriority';\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'orderByValue';\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'equalTo';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, \r\n    /*isUsingEmulator=*/ true);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\nfunction checkTransportInit() {\r\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\r\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\r\n    }\r\n}\r\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\r\nfunction forceWebSockets() {\r\n    checkTransportInit();\r\n    BrowserPollConnection.forceDisallow();\r\n}\r\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\r\nfunction forceLongPolling() {\r\n    checkTransportInit();\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated with the provided\r\n * {@link @firebase/app#FirebaseApp}. Initializes a new instance with default settings if\r\n * no instance exists or if the existing instance uses a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    const db = _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n    if (!db._instanceStarted) {\r\n        const emulator = getDefaultEmulatorHostnameAndPort('database');\r\n        if (emulator) {\r\n            connectDatabaseEmulator(db, ...emulator);\r\n        }\r\n    }\r\n    return db;\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n * @internal\r\n * @param app - A valid FirebaseApp-like object\r\n * @param url - A valid Firebase databaseURL\r\n * @param version - custom version e.g. firebase-admin version\r\n * @param customAppCheckImpl - custom app check implementation\r\n * @param customAuthImpl - custom auth implementation\r\n */\r\nfunction _initStandalone({ app, url, version, customAuthImpl, customAppCheckImpl, nodeAdmin = false }) {\r\n    setSDKVersion(version);\r\n    /**\r\n     * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n     * any actual function.\r\n     */\r\n    const componentContainer = new ComponentContainer('database-standalone');\r\n    const authProvider = new Provider('auth-internal', componentContainer);\r\n    let appCheckProvider;\r\n    if (customAppCheckImpl) {\r\n        appCheckProvider = new Provider('app-check-internal', componentContainer);\r\n        appCheckProvider.setComponent(new Component('app-check-internal', () => customAppCheckImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    }\r\n    authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin);\r\n}\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, _initStandalone, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","import { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\r\n/**\r\n * Domain name for firebase storage.\r\n */\r\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\r\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\r\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\r\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\r\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\r\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\r\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\r\n/**\r\n * 1 second\r\n */\r\nconst DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\r\nclass StorageError extends FirebaseError {\r\n    /**\r\n     * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\r\n     *  added to the end of the message.\r\n     * @param message  - Error message.\r\n     * @param status_ - Corresponding HTTP Status Code\r\n     */\r\n    constructor(code, message, status_ = 0) {\r\n        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\r\n        this.status_ = status_;\r\n        /**\r\n         * Stores custom error data unique to the `StorageError`.\r\n         */\r\n        this.customData = { serverResponse: null };\r\n        this._baseMessage = this.message;\r\n        // Without this, `instanceof StorageError`, in tests for example,\r\n        // returns false.\r\n        Object.setPrototypeOf(this, StorageError.prototype);\r\n    }\r\n    get status() {\r\n        return this.status_;\r\n    }\r\n    set status(status) {\r\n        this.status_ = status;\r\n    }\r\n    /**\r\n     * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\r\n     */\r\n    _codeEquals(code) {\r\n        return prependCode(code) === this.code;\r\n    }\r\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\r\n    get serverResponse() {\r\n        return this.customData.serverResponse;\r\n    }\r\n    set serverResponse(serverResponse) {\r\n        this.customData.serverResponse = serverResponse;\r\n        if (this.customData.serverResponse) {\r\n            this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\r\n        }\r\n        else {\r\n            this.message = this._baseMessage;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @public\r\n * Error codes that can be attached to `StorageError` objects.\r\n */\r\nvar StorageErrorCode;\r\n(function (StorageErrorCode) {\r\n    // Shared between all platforms\r\n    StorageErrorCode[\"UNKNOWN\"] = \"unknown\";\r\n    StorageErrorCode[\"OBJECT_NOT_FOUND\"] = \"object-not-found\";\r\n    StorageErrorCode[\"BUCKET_NOT_FOUND\"] = \"bucket-not-found\";\r\n    StorageErrorCode[\"PROJECT_NOT_FOUND\"] = \"project-not-found\";\r\n    StorageErrorCode[\"QUOTA_EXCEEDED\"] = \"quota-exceeded\";\r\n    StorageErrorCode[\"UNAUTHENTICATED\"] = \"unauthenticated\";\r\n    StorageErrorCode[\"UNAUTHORIZED\"] = \"unauthorized\";\r\n    StorageErrorCode[\"UNAUTHORIZED_APP\"] = \"unauthorized-app\";\r\n    StorageErrorCode[\"RETRY_LIMIT_EXCEEDED\"] = \"retry-limit-exceeded\";\r\n    StorageErrorCode[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\r\n    StorageErrorCode[\"CANCELED\"] = \"canceled\";\r\n    // JS specific\r\n    StorageErrorCode[\"INVALID_EVENT_NAME\"] = \"invalid-event-name\";\r\n    StorageErrorCode[\"INVALID_URL\"] = \"invalid-url\";\r\n    StorageErrorCode[\"INVALID_DEFAULT_BUCKET\"] = \"invalid-default-bucket\";\r\n    StorageErrorCode[\"NO_DEFAULT_BUCKET\"] = \"no-default-bucket\";\r\n    StorageErrorCode[\"CANNOT_SLICE_BLOB\"] = \"cannot-slice-blob\";\r\n    StorageErrorCode[\"SERVER_FILE_WRONG_SIZE\"] = \"server-file-wrong-size\";\r\n    StorageErrorCode[\"NO_DOWNLOAD_URL\"] = \"no-download-url\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT_COUNT\"] = \"invalid-argument-count\";\r\n    StorageErrorCode[\"APP_DELETED\"] = \"app-deleted\";\r\n    StorageErrorCode[\"INVALID_ROOT_OPERATION\"] = \"invalid-root-operation\";\r\n    StorageErrorCode[\"INVALID_FORMAT\"] = \"invalid-format\";\r\n    StorageErrorCode[\"INTERNAL_ERROR\"] = \"internal-error\";\r\n    StorageErrorCode[\"UNSUPPORTED_ENVIRONMENT\"] = \"unsupported-environment\";\r\n})(StorageErrorCode || (StorageErrorCode = {}));\r\nfunction prependCode(code) {\r\n    return 'storage/' + code;\r\n}\r\nfunction unknown() {\r\n    const message = 'An unknown error occurred, please check the error payload for ' +\r\n        'server response.';\r\n    return new StorageError(StorageErrorCode.UNKNOWN, message);\r\n}\r\nfunction objectNotFound(path) {\r\n    return new StorageError(StorageErrorCode.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\r\n}\r\nfunction quotaExceeded(bucket) {\r\n    return new StorageError(StorageErrorCode.QUOTA_EXCEEDED, \"Quota for bucket '\" +\r\n        bucket +\r\n        \"' exceeded, please view quota on \" +\r\n        'https://firebase.google.com/pricing/.');\r\n}\r\nfunction unauthenticated() {\r\n    const message = 'User is not authenticated, please authenticate using Firebase ' +\r\n        'Authentication and try again.';\r\n    return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\r\n}\r\nfunction unauthorizedApp() {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED_APP, 'This app does not have permission to access Firebase Storage on this project.');\r\n}\r\nfunction unauthorized(path) {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\r\n}\r\nfunction retryLimitExceeded() {\r\n    return new StorageError(StorageErrorCode.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\r\n}\r\nfunction canceled() {\r\n    return new StorageError(StorageErrorCode.CANCELED, 'User canceled the upload/download.');\r\n}\r\nfunction invalidUrl(url) {\r\n    return new StorageError(StorageErrorCode.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\r\n}\r\nfunction invalidDefaultBucket(bucket) {\r\n    return new StorageError(StorageErrorCode.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\r\n}\r\nfunction noDefaultBucket() {\r\n    return new StorageError(StorageErrorCode.NO_DEFAULT_BUCKET, 'No default bucket ' +\r\n        \"found. Did you set the '\" +\r\n        CONFIG_STORAGE_BUCKET_KEY +\r\n        \"' property when initializing the app?\");\r\n}\r\nfunction cannotSliceBlob() {\r\n    return new StorageError(StorageErrorCode.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\r\n}\r\nfunction serverFileWrongSize() {\r\n    return new StorageError(StorageErrorCode.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\r\n}\r\nfunction noDownloadURL() {\r\n    return new StorageError(StorageErrorCode.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\r\n}\r\nfunction missingPolyFill(polyFill) {\r\n    return new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction invalidArgument(message) {\r\n    return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\r\n}\r\nfunction appDeleted() {\r\n    return new StorageError(StorageErrorCode.APP_DELETED, 'The Firebase app was deleted.');\r\n}\r\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\r\nfunction invalidRootOperation(name) {\r\n    return new StorageError(StorageErrorCode.INVALID_ROOT_OPERATION, \"The operation '\" +\r\n        name +\r\n        \"' cannot be performed on a root reference, create a non-root \" +\r\n        \"reference using child, such as .child('file.png').\");\r\n}\r\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\r\nfunction invalidFormat(format, message) {\r\n    return new StorageError(StorageErrorCode.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\r\n}\r\n/**\r\n * @param message - A message describing the internal error.\r\n */\r\nfunction internalError(message) {\r\n    throw new StorageError(StorageErrorCode.INTERNAL_ERROR, 'Internal error: ' + message);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\r\nclass Location {\r\n    constructor(bucket, path) {\r\n        this.bucket = bucket;\r\n        this.path_ = path;\r\n    }\r\n    get path() {\r\n        return this.path_;\r\n    }\r\n    get isRoot() {\r\n        return this.path.length === 0;\r\n    }\r\n    fullServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\r\n    }\r\n    bucketOnlyServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o';\r\n    }\r\n    static makeFromBucketSpec(bucketString, host) {\r\n        let bucketLocation;\r\n        try {\r\n            bucketLocation = Location.makeFromUrl(bucketString, host);\r\n        }\r\n        catch (e) {\r\n            // Not valid URL, use as-is. This lets you put bare bucket names in\r\n            // config.\r\n            return new Location(bucketString, '');\r\n        }\r\n        if (bucketLocation.path === '') {\r\n            return bucketLocation;\r\n        }\r\n        else {\r\n            throw invalidDefaultBucket(bucketString);\r\n        }\r\n    }\r\n    static makeFromUrl(url, host) {\r\n        let location = null;\r\n        const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\r\n        function gsModify(loc) {\r\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\r\n                loc.path_ = loc.path_.slice(0, -1);\r\n            }\r\n        }\r\n        const gsPath = '(/(.*))?$';\r\n        const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\r\n        const gsIndices = { bucket: 1, path: 3 };\r\n        function httpModify(loc) {\r\n            loc.path_ = decodeURIComponent(loc.path);\r\n        }\r\n        const version = 'v[A-Za-z0-9_]+';\r\n        const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\r\n        const firebaseStoragePath = '(/([^?#]*).*)?$';\r\n        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\r\n        const firebaseStorageIndices = { bucket: 1, path: 3 };\r\n        const cloudStorageHost = host === DEFAULT_HOST\r\n            ? '(?:storage.googleapis.com|storage.cloud.google.com)'\r\n            : host;\r\n        const cloudStoragePath = '([^?#]*)';\r\n        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\r\n        const cloudStorageIndices = { bucket: 1, path: 2 };\r\n        const groups = [\r\n            { regex: gsRegex, indices: gsIndices, postModify: gsModify },\r\n            {\r\n                regex: firebaseStorageRegExp,\r\n                indices: firebaseStorageIndices,\r\n                postModify: httpModify\r\n            },\r\n            {\r\n                regex: cloudStorageRegExp,\r\n                indices: cloudStorageIndices,\r\n                postModify: httpModify\r\n            }\r\n        ];\r\n        for (let i = 0; i < groups.length; i++) {\r\n            const group = groups[i];\r\n            const captures = group.regex.exec(url);\r\n            if (captures) {\r\n                const bucketValue = captures[group.indices.bucket];\r\n                let pathValue = captures[group.indices.path];\r\n                if (!pathValue) {\r\n                    pathValue = '';\r\n                }\r\n                location = new Location(bucketValue, pathValue);\r\n                group.postModify(location);\r\n                break;\r\n            }\r\n        }\r\n        if (location == null) {\r\n            throw invalidUrl(url);\r\n        }\r\n        return location;\r\n    }\r\n}\n\n/**\r\n * A request whose promise always fails.\r\n */\r\nclass FailRequest {\r\n    constructor(error) {\r\n        this.promise_ = Promise.reject(error);\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(_appDelete = false) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Accepts a callback for an action to perform (`doRequest`),\r\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\r\n * The callback sent to start requires an argument to call (`onRequestComplete`).\r\n * When `start` calls `doRequest`, it passes a callback for when the request has\r\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\r\n * another call to `doRequest` and the above loop continues until the timeout\r\n * is hit, or a successful response occurs.\r\n * @description\r\n * @param doRequest Callback to perform request\r\n * @param backoffCompleteCb Callback to call when backoff has been completed\r\n */\r\nfunction start(doRequest, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nbackoffCompleteCb, timeout) {\r\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\r\n    // type instead of a bunch of functions with state shared in the closure)\r\n    let waitSeconds = 1;\r\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\r\n    // TODO: find a way to exclude Node type definition for storage because storage only works in browser\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let retryTimeoutId = null;\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let globalTimeoutId = null;\r\n    let hitTimeout = false;\r\n    let cancelState = 0;\r\n    function canceled() {\r\n        return cancelState === 2;\r\n    }\r\n    let triggeredCallback = false;\r\n    function triggerCallback(...args) {\r\n        if (!triggeredCallback) {\r\n            triggeredCallback = true;\r\n            backoffCompleteCb.apply(null, args);\r\n        }\r\n    }\r\n    function callWithDelay(millis) {\r\n        retryTimeoutId = setTimeout(() => {\r\n            retryTimeoutId = null;\r\n            doRequest(responseHandler, canceled());\r\n        }, millis);\r\n    }\r\n    function clearGlobalTimeout() {\r\n        if (globalTimeoutId) {\r\n            clearTimeout(globalTimeoutId);\r\n        }\r\n    }\r\n    function responseHandler(success, ...args) {\r\n        if (triggeredCallback) {\r\n            clearGlobalTimeout();\r\n            return;\r\n        }\r\n        if (success) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        const mustStop = canceled() || hitTimeout;\r\n        if (mustStop) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        if (waitSeconds < 64) {\r\n            /* TODO(andysoto): don't back off so quickly if we know we're offline. */\r\n            waitSeconds *= 2;\r\n        }\r\n        let waitMillis;\r\n        if (cancelState === 1) {\r\n            cancelState = 2;\r\n            waitMillis = 0;\r\n        }\r\n        else {\r\n            waitMillis = (waitSeconds + Math.random()) * 1000;\r\n        }\r\n        callWithDelay(waitMillis);\r\n    }\r\n    let stopped = false;\r\n    function stop(wasTimeout) {\r\n        if (stopped) {\r\n            return;\r\n        }\r\n        stopped = true;\r\n        clearGlobalTimeout();\r\n        if (triggeredCallback) {\r\n            return;\r\n        }\r\n        if (retryTimeoutId !== null) {\r\n            if (!wasTimeout) {\r\n                cancelState = 2;\r\n            }\r\n            clearTimeout(retryTimeoutId);\r\n            callWithDelay(0);\r\n        }\r\n        else {\r\n            if (!wasTimeout) {\r\n                cancelState = 1;\r\n            }\r\n        }\r\n    }\r\n    callWithDelay(0);\r\n    globalTimeoutId = setTimeout(() => {\r\n        hitTimeout = true;\r\n        stop(true);\r\n    }, timeout);\r\n    return stop;\r\n}\r\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\r\nfunction stop(id) {\r\n    id(false);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isJustDef(p) {\r\n    return p !== void 0;\r\n}\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction isFunction(p) {\r\n    return typeof p === 'function';\r\n}\r\nfunction isNonArrayObject(p) {\r\n    return typeof p === 'object' && !Array.isArray(p);\r\n}\r\nfunction isString(p) {\r\n    return typeof p === 'string' || p instanceof String;\r\n}\r\nfunction isNativeBlob(p) {\r\n    return isNativeBlobDefined() && p instanceof Blob;\r\n}\r\nfunction isNativeBlobDefined() {\r\n    return typeof Blob !== 'undefined';\r\n}\r\nfunction validateNumber(argument, minValue, maxValue, value) {\r\n    if (value < minValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\r\n    }\r\n    if (value > maxValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction makeUrl(urlPart, host, protocol) {\r\n    let origin = host;\r\n    if (protocol == null) {\r\n        origin = `https://${host}`;\r\n    }\r\n    return `${protocol}://${origin}/v0${urlPart}`;\r\n}\r\nfunction makeQueryString(params) {\r\n    const encode = encodeURIComponent;\r\n    let queryPart = '?';\r\n    for (const key in params) {\r\n        if (params.hasOwnProperty(key)) {\r\n            const nextPart = encode(key) + '=' + encode(params[key]);\r\n            queryPart = queryPart + nextPart + '&';\r\n        }\r\n    }\r\n    // Chop off the extra '&' or '?' on the end\r\n    queryPart = queryPart.slice(0, -1);\r\n    return queryPart;\r\n}\n\n/**\r\n * Error codes for requests made by the XhrIo wrapper.\r\n */\r\nvar ErrorCode;\r\n(function (ErrorCode) {\r\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\r\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\r\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\r\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Checks the status code to see if the action should be retried.\r\n *\r\n * @param status Current HTTP status code returned by server.\r\n * @param additionalRetryCodes additional retry codes to check against\r\n */\r\nfunction isRetryStatusCode(status, additionalRetryCodes) {\r\n    // The codes for which to retry came from this page:\r\n    // https://cloud.google.com/storage/docs/exponential-backoff\r\n    const isFiveHundredCode = status >= 500 && status < 600;\r\n    const extraRetryCodes = [\r\n        // Request Timeout: web server didn't receive full request in time.\r\n        408,\r\n        // Too Many Requests: you're getting rate-limited, basically.\r\n        429\r\n    ];\r\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\r\n    const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\r\n    return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\r\nclass NetworkRequest {\r\n    constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_, retry = true) {\r\n        this.url_ = url_;\r\n        this.method_ = method_;\r\n        this.headers_ = headers_;\r\n        this.body_ = body_;\r\n        this.successCodes_ = successCodes_;\r\n        this.additionalRetryCodes_ = additionalRetryCodes_;\r\n        this.callback_ = callback_;\r\n        this.errorCallback_ = errorCallback_;\r\n        this.timeout_ = timeout_;\r\n        this.progressCallback_ = progressCallback_;\r\n        this.connectionFactory_ = connectionFactory_;\r\n        this.retry = retry;\r\n        this.pendingConnection_ = null;\r\n        this.backoffId_ = null;\r\n        this.canceled_ = false;\r\n        this.appDelete_ = false;\r\n        this.promise_ = new Promise((resolve, reject) => {\r\n            this.resolve_ = resolve;\r\n            this.reject_ = reject;\r\n            this.start_();\r\n        });\r\n    }\r\n    /**\r\n     * Actually starts the retry loop.\r\n     */\r\n    start_() {\r\n        const doTheRequest = (backoffCallback, canceled) => {\r\n            if (canceled) {\r\n                backoffCallback(false, new RequestEndStatus(false, null, true));\r\n                return;\r\n            }\r\n            const connection = this.connectionFactory_();\r\n            this.pendingConnection_ = connection;\r\n            const progressListener = progressEvent => {\r\n                const loaded = progressEvent.loaded;\r\n                const total = progressEvent.lengthComputable ? progressEvent.total : -1;\r\n                if (this.progressCallback_ !== null) {\r\n                    this.progressCallback_(loaded, total);\r\n                }\r\n            };\r\n            if (this.progressCallback_ !== null) {\r\n                connection.addUploadProgressListener(progressListener);\r\n            }\r\n            // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            connection\r\n                .send(this.url_, this.method_, this.body_, this.headers_)\r\n                .then(() => {\r\n                if (this.progressCallback_ !== null) {\r\n                    connection.removeUploadProgressListener(progressListener);\r\n                }\r\n                this.pendingConnection_ = null;\r\n                const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\r\n                const status = connection.getStatus();\r\n                if (!hitServer ||\r\n                    (isRetryStatusCode(status, this.additionalRetryCodes_) &&\r\n                        this.retry)) {\r\n                    const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\r\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\r\n                    return;\r\n                }\r\n                const successCode = this.successCodes_.indexOf(status) !== -1;\r\n                backoffCallback(true, new RequestEndStatus(successCode, connection));\r\n            });\r\n        };\r\n        /**\r\n         * @param requestWentThrough - True if the request eventually went\r\n         *     through, false if it hit the retry limit or was canceled.\r\n         */\r\n        const backoffDone = (requestWentThrough, status) => {\r\n            const resolve = this.resolve_;\r\n            const reject = this.reject_;\r\n            const connection = status.connection;\r\n            if (status.wasSuccessCode) {\r\n                try {\r\n                    const result = this.callback_(connection, connection.getResponse());\r\n                    if (isJustDef(result)) {\r\n                        resolve(result);\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }\r\n            else {\r\n                if (connection !== null) {\r\n                    const err = unknown();\r\n                    err.serverResponse = connection.getErrorText();\r\n                    if (this.errorCallback_) {\r\n                        reject(this.errorCallback_(connection, err));\r\n                    }\r\n                    else {\r\n                        reject(err);\r\n                    }\r\n                }\r\n                else {\r\n                    if (status.canceled) {\r\n                        const err = this.appDelete_ ? appDeleted() : canceled();\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        const err = retryLimitExceeded();\r\n                        reject(err);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        if (this.canceled_) {\r\n            backoffDone(false, new RequestEndStatus(false, null, true));\r\n        }\r\n        else {\r\n            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(appDelete) {\r\n        this.canceled_ = true;\r\n        this.appDelete_ = appDelete || false;\r\n        if (this.backoffId_ !== null) {\r\n            stop(this.backoffId_);\r\n        }\r\n        if (this.pendingConnection_ !== null) {\r\n            this.pendingConnection_.abort();\r\n        }\r\n    }\r\n}\r\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\r\nclass RequestEndStatus {\r\n    constructor(wasSuccessCode, connection, canceled) {\r\n        this.wasSuccessCode = wasSuccessCode;\r\n        this.connection = connection;\r\n        this.canceled = !!canceled;\r\n    }\r\n}\r\nfunction addAuthHeader_(headers, authToken) {\r\n    if (authToken !== null && authToken.length > 0) {\r\n        headers['Authorization'] = 'Firebase ' + authToken;\r\n    }\r\n}\r\nfunction addVersionHeader_(headers, firebaseVersion) {\r\n    headers['X-Firebase-Storage-Version'] =\r\n        'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\r\n}\r\nfunction addGmpidHeader_(headers, appId) {\r\n    if (appId) {\r\n        headers['X-Firebase-GMPID'] = appId;\r\n    }\r\n}\r\nfunction addAppCheckHeader_(headers, appCheckToken) {\r\n    if (appCheckToken !== null) {\r\n        headers['X-Firebase-AppCheck'] = appCheckToken;\r\n    }\r\n}\r\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion, retry = true) {\r\n    const queryPart = makeQueryString(requestInfo.urlParams);\r\n    const url = requestInfo.url + queryPart;\r\n    const headers = Object.assign({}, requestInfo.headers);\r\n    addGmpidHeader_(headers, appId);\r\n    addAuthHeader_(headers, authToken);\r\n    addVersionHeader_(headers, firebaseVersion);\r\n    addAppCheckHeader_(headers, appCheckToken);\r\n    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getBlobBuilder() {\r\n    if (typeof BlobBuilder !== 'undefined') {\r\n        return BlobBuilder;\r\n    }\r\n    else if (typeof WebKitBlobBuilder !== 'undefined') {\r\n        return WebKitBlobBuilder;\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\r\nfunction getBlob$1(...args) {\r\n    const BlobBuilder = getBlobBuilder();\r\n    if (BlobBuilder !== undefined) {\r\n        const bb = new BlobBuilder();\r\n        for (let i = 0; i < args.length; i++) {\r\n            bb.append(args[i]);\r\n        }\r\n        return bb.getBlob();\r\n    }\r\n    else {\r\n        if (isNativeBlobDefined()) {\r\n            return new Blob(args);\r\n        }\r\n        else {\r\n            throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\r\n        }\r\n    }\r\n}\r\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\r\nfunction sliceBlob(blob, start, end) {\r\n    if (blob.webkitSlice) {\r\n        return blob.webkitSlice(start, end);\r\n    }\r\n    else if (blob.mozSlice) {\r\n        return blob.mozSlice(start, end);\r\n    }\r\n    else if (blob.slice) {\r\n        return blob.slice(start, end);\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Converts a Base64 encoded string to a binary string. */\r\nfunction decodeBase64(encoded) {\r\n    if (typeof atob === 'undefined') {\r\n        throw missingPolyFill('base-64');\r\n    }\r\n    return atob(encoded);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\r\nconst StringFormat = {\r\n    /**\r\n     * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n     * sequence.\r\n     * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n     */\r\n    RAW: 'raw',\r\n    /**\r\n     * Indicates the string should be interpreted as base64-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64: 'base64',\r\n    /**\r\n     * Indicates the string should be interpreted as base64url-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64URL: 'base64url',\r\n    /**\r\n     * Indicates the string is a data URL, such as one obtained from\r\n     * canvas.toDataURL().\r\n     * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n     * becomes the byte sequence\r\n     * 69 a6 9a\r\n     * (the content-type \"application/octet-stream\" is also applied, but can\r\n     * be overridden in the metadata object).\r\n     */\r\n    DATA_URL: 'data_url'\r\n};\r\nclass StringData {\r\n    constructor(data, contentType) {\r\n        this.data = data;\r\n        this.contentType = contentType || null;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction dataFromString(format, stringData) {\r\n    switch (format) {\r\n        case StringFormat.RAW:\r\n            return new StringData(utf8Bytes_(stringData));\r\n        case StringFormat.BASE64:\r\n        case StringFormat.BASE64URL:\r\n            return new StringData(base64Bytes_(format, stringData));\r\n        case StringFormat.DATA_URL:\r\n            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\r\n        // do nothing\r\n    }\r\n    // assert(false);\r\n    throw unknown();\r\n}\r\nfunction utf8Bytes_(value) {\r\n    const b = [];\r\n    for (let i = 0; i < value.length; i++) {\r\n        let c = value.charCodeAt(i);\r\n        if (c <= 127) {\r\n            b.push(c);\r\n        }\r\n        else {\r\n            if (c <= 2047) {\r\n                b.push(192 | (c >> 6), 128 | (c & 63));\r\n            }\r\n            else {\r\n                if ((c & 64512) === 55296) {\r\n                    // The start of a surrogate pair.\r\n                    const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\r\n                    if (!valid) {\r\n                        // The second surrogate wasn't there.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        const hi = c;\r\n                        const lo = value.charCodeAt(++i);\r\n                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\r\n                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n                else {\r\n                    if ((c & 64512) === 56320) {\r\n                        // Invalid low surrogate.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new Uint8Array(b);\r\n}\r\nfunction percentEncodedBytes_(value) {\r\n    let decoded;\r\n    try {\r\n        decoded = decodeURIComponent(value);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\r\n    }\r\n    return utf8Bytes_(decoded);\r\n}\r\nfunction base64Bytes_(format, value) {\r\n    switch (format) {\r\n        case StringFormat.BASE64: {\r\n            const hasMinus = value.indexOf('-') !== -1;\r\n            const hasUnder = value.indexOf('_') !== -1;\r\n            if (hasMinus || hasUnder) {\r\n                const invalidChar = hasMinus ? '-' : '_';\r\n                throw invalidFormat(format, \"Invalid character '\" +\r\n                    invalidChar +\r\n                    \"' found: is it base64url encoded?\");\r\n            }\r\n            break;\r\n        }\r\n        case StringFormat.BASE64URL: {\r\n            const hasPlus = value.indexOf('+') !== -1;\r\n            const hasSlash = value.indexOf('/') !== -1;\r\n            if (hasPlus || hasSlash) {\r\n                const invalidChar = hasPlus ? '+' : '/';\r\n                throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\r\n            }\r\n            value = value.replace(/-/g, '+').replace(/_/g, '/');\r\n            break;\r\n        }\r\n        // do nothing\r\n    }\r\n    let bytes;\r\n    try {\r\n        bytes = decodeBase64(value);\r\n    }\r\n    catch (e) {\r\n        if (e.message.includes('polyfill')) {\r\n            throw e;\r\n        }\r\n        throw invalidFormat(format, 'Invalid character found');\r\n    }\r\n    const array = new Uint8Array(bytes.length);\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        array[i] = bytes.charCodeAt(i);\r\n    }\r\n    return array;\r\n}\r\nclass DataURLParts {\r\n    constructor(dataURL) {\r\n        this.base64 = false;\r\n        this.contentType = null;\r\n        const matches = dataURL.match(/^data:([^,]+)?,/);\r\n        if (matches === null) {\r\n            throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\r\n        }\r\n        const middle = matches[1] || null;\r\n        if (middle != null) {\r\n            this.base64 = endsWith(middle, ';base64');\r\n            this.contentType = this.base64\r\n                ? middle.substring(0, middle.length - ';base64'.length)\r\n                : middle;\r\n        }\r\n        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\r\n    }\r\n}\r\nfunction dataURLBytes_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    if (parts.base64) {\r\n        return base64Bytes_(StringFormat.BASE64, parts.rest);\r\n    }\r\n    else {\r\n        return percentEncodedBytes_(parts.rest);\r\n    }\r\n}\r\nfunction dataURLContentType_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    return parts.contentType;\r\n}\r\nfunction endsWith(s, end) {\r\n    const longEnough = s.length >= end.length;\r\n    if (!longEnough) {\r\n        return false;\r\n    }\r\n    return s.substring(s.length - end.length) === end;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\r\nclass FbsBlob {\r\n    constructor(data, elideCopy) {\r\n        let size = 0;\r\n        let blobType = '';\r\n        if (isNativeBlob(data)) {\r\n            this.data_ = data;\r\n            size = data.size;\r\n            blobType = data.type;\r\n        }\r\n        else if (data instanceof ArrayBuffer) {\r\n            if (elideCopy) {\r\n                this.data_ = new Uint8Array(data);\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.byteLength);\r\n                this.data_.set(new Uint8Array(data));\r\n            }\r\n            size = this.data_.length;\r\n        }\r\n        else if (data instanceof Uint8Array) {\r\n            if (elideCopy) {\r\n                this.data_ = data;\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.length);\r\n                this.data_.set(data);\r\n            }\r\n            size = data.length;\r\n        }\r\n        this.size_ = size;\r\n        this.type_ = blobType;\r\n    }\r\n    size() {\r\n        return this.size_;\r\n    }\r\n    type() {\r\n        return this.type_;\r\n    }\r\n    slice(startByte, endByte) {\r\n        if (isNativeBlob(this.data_)) {\r\n            const realBlob = this.data_;\r\n            const sliced = sliceBlob(realBlob, startByte, endByte);\r\n            if (sliced === null) {\r\n                return null;\r\n            }\r\n            return new FbsBlob(sliced);\r\n        }\r\n        else {\r\n            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\r\n            return new FbsBlob(slice, true);\r\n        }\r\n    }\r\n    static getBlob(...args) {\r\n        if (isNativeBlobDefined()) {\r\n            const blobby = args.map((val) => {\r\n                if (val instanceof FbsBlob) {\r\n                    return val.data_;\r\n                }\r\n                else {\r\n                    return val;\r\n                }\r\n            });\r\n            return new FbsBlob(getBlob$1.apply(null, blobby));\r\n        }\r\n        else {\r\n            const uint8Arrays = args.map((val) => {\r\n                if (isString(val)) {\r\n                    return dataFromString(StringFormat.RAW, val).data;\r\n                }\r\n                else {\r\n                    // Blobs don't exist, so this has to be a Uint8Array.\r\n                    return val.data_;\r\n                }\r\n            });\r\n            let finalLength = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                finalLength += array.byteLength;\r\n            });\r\n            const merged = new Uint8Array(finalLength);\r\n            let index = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                for (let i = 0; i < array.length; i++) {\r\n                    merged[index++] = array[i];\r\n                }\r\n            });\r\n            return new FbsBlob(merged, true);\r\n        }\r\n    }\r\n    uploadData() {\r\n        return this.data_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\r\nfunction jsonObjectOrNull(s) {\r\n    let obj;\r\n    try {\r\n        obj = JSON.parse(s);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n    if (isNonArrayObject(obj)) {\r\n        return obj;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\r\n/**\r\n * @return Null if the path is already at the root.\r\n */\r\nfunction parent(path) {\r\n    if (path.length === 0) {\r\n        return null;\r\n    }\r\n    const index = path.lastIndexOf('/');\r\n    if (index === -1) {\r\n        return '';\r\n    }\r\n    const newPath = path.slice(0, index);\r\n    return newPath;\r\n}\r\nfunction child(path, childPath) {\r\n    const canonicalChildPath = childPath\r\n        .split('/')\r\n        .filter(component => component.length > 0)\r\n        .join('/');\r\n    if (path.length === 0) {\r\n        return canonicalChildPath;\r\n    }\r\n    else {\r\n        return path + '/' + canonicalChildPath;\r\n    }\r\n}\r\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\r\nfunction lastComponent(path) {\r\n    const index = path.lastIndexOf('/', path.length - 2);\r\n    if (index === -1) {\r\n        return path;\r\n    }\r\n    else {\r\n        return path.slice(index + 1);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction noXform_(metadata, value) {\r\n    return value;\r\n}\r\nclass Mapping {\r\n    constructor(server, local, writable, xform) {\r\n        this.server = server;\r\n        this.local = local || server;\r\n        this.writable = !!writable;\r\n        this.xform = xform || noXform_;\r\n    }\r\n}\r\nlet mappings_ = null;\r\nfunction xformPath(fullPath) {\r\n    if (!isString(fullPath) || fullPath.length < 2) {\r\n        return fullPath;\r\n    }\r\n    else {\r\n        return lastComponent(fullPath);\r\n    }\r\n}\r\nfunction getMappings() {\r\n    if (mappings_) {\r\n        return mappings_;\r\n    }\r\n    const mappings = [];\r\n    mappings.push(new Mapping('bucket'));\r\n    mappings.push(new Mapping('generation'));\r\n    mappings.push(new Mapping('metageneration'));\r\n    mappings.push(new Mapping('name', 'fullPath', true));\r\n    function mappingsXformPath(_metadata, fullPath) {\r\n        return xformPath(fullPath);\r\n    }\r\n    const nameMapping = new Mapping('name');\r\n    nameMapping.xform = mappingsXformPath;\r\n    mappings.push(nameMapping);\r\n    /**\r\n     * Coerces the second param to a number, if it is defined.\r\n     */\r\n    function xformSize(_metadata, size) {\r\n        if (size !== undefined) {\r\n            return Number(size);\r\n        }\r\n        else {\r\n            return size;\r\n        }\r\n    }\r\n    const sizeMapping = new Mapping('size');\r\n    sizeMapping.xform = xformSize;\r\n    mappings.push(sizeMapping);\r\n    mappings.push(new Mapping('timeCreated'));\r\n    mappings.push(new Mapping('updated'));\r\n    mappings.push(new Mapping('md5Hash', null, true));\r\n    mappings.push(new Mapping('cacheControl', null, true));\r\n    mappings.push(new Mapping('contentDisposition', null, true));\r\n    mappings.push(new Mapping('contentEncoding', null, true));\r\n    mappings.push(new Mapping('contentLanguage', null, true));\r\n    mappings.push(new Mapping('contentType', null, true));\r\n    mappings.push(new Mapping('metadata', 'customMetadata', true));\r\n    mappings_ = mappings;\r\n    return mappings_;\r\n}\r\nfunction addRef(metadata, service) {\r\n    function generateRef() {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const loc = new Location(bucket, path);\r\n        return service._makeStorageReference(loc);\r\n    }\r\n    Object.defineProperty(metadata, 'ref', { get: generateRef });\r\n}\r\nfunction fromResource(service, resource, mappings) {\r\n    const metadata = {};\r\n    metadata['type'] = 'file';\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\r\n    }\r\n    addRef(metadata, service);\r\n    return metadata;\r\n}\r\nfunction fromResourceString(service, resourceString, mappings) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromResource(service, resource, mappings);\r\n}\r\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    if (!isString(obj['downloadTokens'])) {\r\n        // This can happen if objects are uploaded through GCS and retrieved\r\n        // through list, so we don't want to throw an Error.\r\n        return null;\r\n    }\r\n    const tokens = obj['downloadTokens'];\r\n    if (tokens.length === 0) {\r\n        return null;\r\n    }\r\n    const encode = encodeURIComponent;\r\n    const tokensList = tokens.split(',');\r\n    const urls = tokensList.map((token) => {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\r\n        const base = makeUrl(urlPart, host, protocol);\r\n        const queryString = makeQueryString({\r\n            alt: 'media',\r\n            token\r\n        });\r\n        return base + queryString;\r\n    });\r\n    return urls[0];\r\n}\r\nfunction toResourceString(metadata, mappings) {\r\n    const resource = {};\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        if (mapping.writable) {\r\n            resource[mapping.server] = metadata[mapping.local];\r\n        }\r\n    }\r\n    return JSON.stringify(resource);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PREFIXES_KEY = 'prefixes';\r\nconst ITEMS_KEY = 'items';\r\nfunction fromBackendResponse(service, bucket, resource) {\r\n    const listResult = {\r\n        prefixes: [],\r\n        items: [],\r\n        nextPageToken: resource['nextPageToken']\r\n    };\r\n    if (resource[PREFIXES_KEY]) {\r\n        for (const path of resource[PREFIXES_KEY]) {\r\n            const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\r\n            const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\r\n            listResult.prefixes.push(reference);\r\n        }\r\n    }\r\n    if (resource[ITEMS_KEY]) {\r\n        for (const item of resource[ITEMS_KEY]) {\r\n            const reference = service._makeStorageReference(new Location(bucket, item['name']));\r\n            listResult.items.push(reference);\r\n        }\r\n    }\r\n    return listResult;\r\n}\r\nfunction fromResponseString(service, bucket, resourceString) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromBackendResponse(service, bucket, resource);\r\n}\n\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\r\nclass RequestInfo {\r\n    constructor(url, method, \r\n    /**\r\n     * Returns the value with which to resolve the request's promise. Only called\r\n     * if the request is successful. Throw from this function to reject the\r\n     * returned Request's promise with the thrown error.\r\n     * Note: The XhrIo passed to this function may be reused after this callback\r\n     * returns. Do not keep a reference to it in any way.\r\n     */\r\n    handler, timeout) {\r\n        this.url = url;\r\n        this.method = method;\r\n        this.handler = handler;\r\n        this.timeout = timeout;\r\n        this.urlParams = {};\r\n        this.headers = {};\r\n        this.body = null;\r\n        this.errorHandler = null;\r\n        /**\r\n         * Called with the current number of bytes uploaded and total size (-1 if not\r\n         * computable) of the request body (i.e. used to report upload progress).\r\n         */\r\n        this.progressCallback = null;\r\n        this.successCodes = [200];\r\n        this.additionalRetryCodes = [];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\r\nfunction handlerCheck(cndn) {\r\n    if (!cndn) {\r\n        throw unknown();\r\n    }\r\n}\r\nfunction metadataHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return metadata;\r\n    }\r\n    return handler;\r\n}\r\nfunction listHandler(service, bucket) {\r\n    function handler(xhr, text) {\r\n        const listResult = fromResponseString(service, bucket, text);\r\n        handlerCheck(listResult !== null);\r\n        return listResult;\r\n    }\r\n    return handler;\r\n}\r\nfunction downloadUrlHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\r\n    }\r\n    return handler;\r\n}\r\nfunction sharedErrorHandler(location) {\r\n    function errorHandler(xhr, err) {\r\n        let newErr;\r\n        if (xhr.getStatus() === 401) {\r\n            if (\r\n            // This exact message string is the only consistent part of the\r\n            // server's error response that identifies it as an App Check error.\r\n            xhr.getErrorText().includes('Firebase App Check token is invalid')) {\r\n                newErr = unauthorizedApp();\r\n            }\r\n            else {\r\n                newErr = unauthenticated();\r\n            }\r\n        }\r\n        else {\r\n            if (xhr.getStatus() === 402) {\r\n                newErr = quotaExceeded(location.bucket);\r\n            }\r\n            else {\r\n                if (xhr.getStatus() === 403) {\r\n                    newErr = unauthorized(location.path);\r\n                }\r\n                else {\r\n                    newErr = err;\r\n                }\r\n            }\r\n        }\r\n        newErr.status = xhr.getStatus();\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction objectErrorHandler(location) {\r\n    const shared = sharedErrorHandler(location);\r\n    function errorHandler(xhr, err) {\r\n        let newErr = shared(xhr, err);\r\n        if (xhr.getStatus() === 404) {\r\n            newErr = objectNotFound(location.path);\r\n        }\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction getMetadata$2(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\r\n    const urlParams = {};\r\n    if (location.isRoot) {\r\n        urlParams['prefix'] = '';\r\n    }\r\n    else {\r\n        urlParams['prefix'] = location.path + '/';\r\n    }\r\n    if (delimiter && delimiter.length > 0) {\r\n        urlParams['delimiter'] = delimiter;\r\n    }\r\n    if (pageToken) {\r\n        urlParams['pageToken'] = pageToken;\r\n    }\r\n    if (maxResults) {\r\n        urlParams['maxResults'] = maxResults;\r\n    }\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    if (maxDownloadSizeBytes !== undefined) {\r\n        requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\r\n        requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\r\n    }\r\n    return requestInfo;\r\n}\r\nfunction getDownloadUrl(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction updateMetadata$2(service, location, metadata, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'PATCH';\r\n    const body = toResourceString(metadata, mappings);\r\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction deleteObject$2(service, location) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'DELETE';\r\n    const timeout = service.maxOperationRetryTime;\r\n    function handler(_xhr, _text) { }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.successCodes = [200, 204];\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction determineContentType_(metadata, blob) {\r\n    return ((metadata && metadata['contentType']) ||\r\n        (blob && blob.type()) ||\r\n        'application/octet-stream');\r\n}\r\nfunction metadataForUpload_(location, blob, metadata) {\r\n    const metadataClone = Object.assign({}, metadata);\r\n    metadataClone['fullPath'] = location.path;\r\n    metadataClone['size'] = blob.size();\r\n    if (!metadataClone['contentType']) {\r\n        metadataClone['contentType'] = determineContentType_(null, blob);\r\n    }\r\n    return metadataClone;\r\n}\r\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\r\nfunction multipartUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'multipart'\r\n    };\r\n    function genBoundary() {\r\n        let str = '';\r\n        for (let i = 0; i < 2; i++) {\r\n            str = str + Math.random().toString().slice(2);\r\n        }\r\n        return str;\r\n    }\r\n    const boundary = genBoundary();\r\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\r\n    const metadata_ = metadataForUpload_(location, blob, metadata);\r\n    const metadataString = toResourceString(metadata_, mappings);\r\n    const preBlobPart = '--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\r\n        metadataString +\r\n        '\\r\\n--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: ' +\r\n        metadata_['contentType'] +\r\n        '\\r\\n\\r\\n';\r\n    const postBlobPart = '\\r\\n--' + boundary + '--';\r\n    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    const urlParams = { name: metadata_['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\r\nclass ResumableUploadStatus {\r\n    constructor(current, total, finalized, metadata) {\r\n        this.current = current;\r\n        this.total = total;\r\n        this.finalized = !!finalized;\r\n        this.metadata = metadata || null;\r\n    }\r\n}\r\nfunction checkResumeHeader_(xhr, allowed) {\r\n    let status = null;\r\n    try {\r\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\r\n    }\r\n    catch (e) {\r\n        handlerCheck(false);\r\n    }\r\n    const allowedStatus = allowed || ['active'];\r\n    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\r\n    return status;\r\n}\r\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const metadataForUpload = metadataForUpload_(location, blob, metadata);\r\n    const urlParams = { name: metadataForUpload['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'resumable',\r\n        'X-Goog-Upload-Command': 'start',\r\n        'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\r\n        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    };\r\n    const body = toResourceString(metadataForUpload, mappings);\r\n    const timeout = service.maxUploadRetryTime;\r\n    function handler(xhr) {\r\n        checkResumeHeader_(xhr);\r\n        let url;\r\n        try {\r\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        handlerCheck(isString(url));\r\n        return url;\r\n    }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\r\nfunction getResumableUploadStatus(service, location, url, blob) {\r\n    const headers = { 'X-Goog-Upload-Command': 'query' };\r\n    function handler(xhr) {\r\n        const status = checkResumeHeader_(xhr, ['active', 'final']);\r\n        let sizeString = null;\r\n        try {\r\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        if (!sizeString) {\r\n            // null or empty string\r\n            handlerCheck(false);\r\n        }\r\n        const size = Number(sizeString);\r\n        handlerCheck(!isNaN(size));\r\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\r\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\r\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\r\n    // TODO(andysoto): standardize on internal asserts\r\n    // assert(!(opt_status && opt_status.finalized));\r\n    const status_ = new ResumableUploadStatus(0, 0);\r\n    if (status) {\r\n        status_.current = status.current;\r\n        status_.total = status.total;\r\n    }\r\n    else {\r\n        status_.current = 0;\r\n        status_.total = blob.size();\r\n    }\r\n    if (blob.size() !== status_.total) {\r\n        throw serverFileWrongSize();\r\n    }\r\n    const bytesLeft = status_.total - status_.current;\r\n    let bytesToUpload = bytesLeft;\r\n    if (chunkSize > 0) {\r\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\r\n    }\r\n    const startByte = status_.current;\r\n    const endByte = startByte + bytesToUpload;\r\n    let uploadCommand = '';\r\n    if (bytesToUpload === 0) {\r\n        uploadCommand = 'finalize';\r\n    }\r\n    else if (bytesLeft === bytesToUpload) {\r\n        uploadCommand = 'upload, finalize';\r\n    }\r\n    else {\r\n        uploadCommand = 'upload';\r\n    }\r\n    const headers = {\r\n        'X-Goog-Upload-Command': uploadCommand,\r\n        'X-Goog-Upload-Offset': `${status_.current}`\r\n    };\r\n    const body = blob.slice(startByte, endByte);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    function handler(xhr, text) {\r\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\r\n        // the 'x-range-md5' header comes back with status code 308 responses.\r\n        // We'll only be able to bail out though, because you can't re-upload a\r\n        // range that you previously uploaded.\r\n        const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\r\n        const newCurrent = status_.current + bytesToUpload;\r\n        const size = blob.size();\r\n        let metadata;\r\n        if (uploadStatus === 'final') {\r\n            metadata = metadataHandler(service, mappings)(xhr, text);\r\n        }\r\n        else {\r\n            metadata = null;\r\n        }\r\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.progressCallback = progressCallback || null;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\r\nconst TaskEvent = {\r\n    /**\r\n     * For this event,\r\n     * <ul>\r\n     *   <li>The `next` function is triggered on progress updates and when the\r\n     *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n     *       argument.</li>\r\n     *   <li>The `error` function is triggered if the upload is canceled or fails\r\n     *       for another reason.</li>\r\n     *   <li>The `complete` function is triggered if the upload completes\r\n     *       successfully.</li>\r\n     * </ul>\r\n     */\r\n    STATE_CHANGED: 'state_changed'\r\n};\r\n// type keys = keyof TaskState\r\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\r\nconst TaskState = {\r\n    /** The task is currently transferring data. */\r\n    RUNNING: 'running',\r\n    /** The task was paused by the user. */\r\n    PAUSED: 'paused',\r\n    /** The task completed successfully. */\r\n    SUCCESS: 'success',\r\n    /** The task was canceled. */\r\n    CANCELED: 'canceled',\r\n    /** The task failed with an error. */\r\n    ERROR: 'error'\r\n};\r\nfunction taskStateFromInternalTaskState(state) {\r\n    switch (state) {\r\n        case \"running\" /* InternalTaskState.RUNNING */:\r\n        case \"pausing\" /* InternalTaskState.PAUSING */:\r\n        case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            return TaskState.RUNNING;\r\n        case \"paused\" /* InternalTaskState.PAUSED */:\r\n            return TaskState.PAUSED;\r\n        case \"success\" /* InternalTaskState.SUCCESS */:\r\n            return TaskState.SUCCESS;\r\n        case \"canceled\" /* InternalTaskState.CANCELED */:\r\n            return TaskState.CANCELED;\r\n        case \"error\" /* InternalTaskState.ERROR */:\r\n            return TaskState.ERROR;\r\n        default:\r\n            // TODO(andysoto): assert(false);\r\n            return TaskState.ERROR;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Observer {\r\n    constructor(nextOrObserver, error, complete) {\r\n        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\r\n        if (asFunctions) {\r\n            this.next = nextOrObserver;\r\n            this.error = error !== null && error !== void 0 ? error : undefined;\r\n            this.complete = complete !== null && complete !== void 0 ? complete : undefined;\r\n        }\r\n        else {\r\n            const observer = nextOrObserver;\r\n            this.next = observer.next;\r\n            this.error = observer.error;\r\n            this.complete = observer.complete;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(f) {\r\n    return (...argsToForward) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.resolve().then(() => f(...argsToForward));\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** An override for the text-based Connection. Used in tests. */\r\nlet textFactoryOverride = null;\r\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\r\nclass XhrConnection {\r\n    constructor() {\r\n        this.sent_ = false;\r\n        this.xhr_ = new XMLHttpRequest();\r\n        this.initXhr();\r\n        this.errorCode_ = ErrorCode.NO_ERROR;\r\n        this.sendPromise_ = new Promise(resolve => {\r\n            this.xhr_.addEventListener('abort', () => {\r\n                this.errorCode_ = ErrorCode.ABORT;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('error', () => {\r\n                this.errorCode_ = ErrorCode.NETWORK_ERROR;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('load', () => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    send(url, method, body, headers) {\r\n        if (this.sent_) {\r\n            throw internalError('cannot .send() more than once');\r\n        }\r\n        this.sent_ = true;\r\n        this.xhr_.open(method, url, true);\r\n        if (headers !== undefined) {\r\n            for (const key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    this.xhr_.setRequestHeader(key, headers[key].toString());\r\n                }\r\n            }\r\n        }\r\n        if (body !== undefined) {\r\n            this.xhr_.send(body);\r\n        }\r\n        else {\r\n            this.xhr_.send();\r\n        }\r\n        return this.sendPromise_;\r\n    }\r\n    getErrorCode() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorCode() before sending');\r\n        }\r\n        return this.errorCode_;\r\n    }\r\n    getStatus() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getStatus() before sending');\r\n        }\r\n        try {\r\n            return this.xhr_.status;\r\n        }\r\n        catch (e) {\r\n            return -1;\r\n        }\r\n    }\r\n    getResponse() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getResponse() before sending');\r\n        }\r\n        return this.xhr_.response;\r\n    }\r\n    getErrorText() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorText() before sending');\r\n        }\r\n        return this.xhr_.statusText;\r\n    }\r\n    /** Aborts the request. */\r\n    abort() {\r\n        this.xhr_.abort();\r\n    }\r\n    getResponseHeader(header) {\r\n        return this.xhr_.getResponseHeader(header);\r\n    }\r\n    addUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.addEventListener('progress', listener);\r\n        }\r\n    }\r\n    removeUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.removeEventListener('progress', listener);\r\n        }\r\n    }\r\n}\r\nclass XhrTextConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'text';\r\n    }\r\n}\r\nfunction newTextConnection() {\r\n    return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\r\n}\r\nclass XhrBytesConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'arraybuffer';\r\n    }\r\n}\r\nfunction newBytesConnection() {\r\n    return new XhrBytesConnection();\r\n}\r\nclass XhrBlobConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'blob';\r\n    }\r\n}\r\nfunction newBlobConnection() {\r\n    return new XhrBlobConnection();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\r\nclass UploadTask {\r\n    /**\r\n     * @param ref - The firebaseStorage.Reference object this task came\r\n     *     from, untyped to avoid cyclic dependencies.\r\n     * @param blob - The blob to upload.\r\n     */\r\n    constructor(ref, blob, metadata = null) {\r\n        /**\r\n         * Number of bytes transferred so far.\r\n         */\r\n        this._transferred = 0;\r\n        this._needToFetchStatus = false;\r\n        this._needToFetchMetadata = false;\r\n        this._observers = [];\r\n        this._error = undefined;\r\n        this._uploadUrl = undefined;\r\n        this._request = undefined;\r\n        this._chunkMultiplier = 1;\r\n        this._resolve = undefined;\r\n        this._reject = undefined;\r\n        this._ref = ref;\r\n        this._blob = blob;\r\n        this._metadata = metadata;\r\n        this._mappings = getMappings();\r\n        this._resumable = this._shouldDoResumable(this._blob);\r\n        this._state = \"running\" /* InternalTaskState.RUNNING */;\r\n        this._errorHandler = error => {\r\n            this._request = undefined;\r\n            this._chunkMultiplier = 1;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this._needToFetchStatus = true;\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                const backoffExpired = this.isExponentialBackoffExpired();\r\n                if (isRetryStatusCode(error.status, [])) {\r\n                    if (backoffExpired) {\r\n                        error = retryLimitExceeded();\r\n                    }\r\n                    else {\r\n                        this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\r\n                        this._needToFetchStatus = true;\r\n                        this.completeTransitions_();\r\n                        return;\r\n                    }\r\n                }\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this._metadataErrorHandler = error => {\r\n            this._request = undefined;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this.sleepTime = 0;\r\n        this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\r\n        this._promise = new Promise((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n            this._start();\r\n        });\r\n        // Prevent uncaught rejections on the internal promise from bubbling out\r\n        // to the top level with a dummy handler.\r\n        this._promise.then(null, () => { });\r\n    }\r\n    isExponentialBackoffExpired() {\r\n        return this.sleepTime > this.maxSleepTime;\r\n    }\r\n    _makeProgressCallback() {\r\n        const sizeBefore = this._transferred;\r\n        return loaded => this._updateProgress(sizeBefore + loaded);\r\n    }\r\n    _shouldDoResumable(blob) {\r\n        return blob.size() > 256 * 1024;\r\n    }\r\n    _start() {\r\n        if (this._state !== \"running\" /* InternalTaskState.RUNNING */) {\r\n            // This can happen if someone pauses us in a resume callback, for example.\r\n            return;\r\n        }\r\n        if (this._request !== undefined) {\r\n            return;\r\n        }\r\n        if (this._resumable) {\r\n            if (this._uploadUrl === undefined) {\r\n                this._createResumable();\r\n            }\r\n            else {\r\n                if (this._needToFetchStatus) {\r\n                    this._fetchStatus();\r\n                }\r\n                else {\r\n                    if (this._needToFetchMetadata) {\r\n                        // Happens if we miss the metadata on upload completion.\r\n                        this._fetchMetadata();\r\n                    }\r\n                    else {\r\n                        this.pendingTimeout = setTimeout(() => {\r\n                            this.pendingTimeout = undefined;\r\n                            this._continueUpload();\r\n                        }, this.sleepTime);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._oneShotUpload();\r\n        }\r\n    }\r\n    _resolveToken(callback) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.all([\r\n            this._ref.storage._getAuthToken(),\r\n            this._ref.storage._getAppCheckToken()\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            switch (this._state) {\r\n                case \"running\" /* InternalTaskState.RUNNING */:\r\n                    callback(authToken, appCheckToken);\r\n                    break;\r\n                case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                    this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                    break;\r\n                case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                    this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    // TODO(andysoto): assert false\r\n    _createResumable() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = createRequest;\r\n            createRequest.getPromise().then((url) => {\r\n                this._request = undefined;\r\n                this._uploadUrl = url;\r\n                this._needToFetchStatus = false;\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _fetchStatus() {\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\r\n            const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = statusRequest;\r\n            statusRequest.getPromise().then(status => {\r\n                status = status;\r\n                this._request = undefined;\r\n                this._updateProgress(status.current);\r\n                this._needToFetchStatus = false;\r\n                if (status.finalized) {\r\n                    this._needToFetchMetadata = true;\r\n                }\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _continueUpload() {\r\n        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        const status = new ResumableUploadStatus(this._transferred, this._blob.size());\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            let requestInfo;\r\n            try {\r\n                requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\r\n            }\r\n            catch (e) {\r\n                this._error = e;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n                return;\r\n            }\r\n            const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken, \r\n            /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\r\n            );\r\n            this._request = uploadRequest;\r\n            uploadRequest.getPromise().then((newStatus) => {\r\n                this._increaseMultiplier();\r\n                this._request = undefined;\r\n                this._updateProgress(newStatus.current);\r\n                if (newStatus.finalized) {\r\n                    this._metadata = newStatus.metadata;\r\n                    this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n                }\r\n                else {\r\n                    this.completeTransitions_();\r\n                }\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _increaseMultiplier() {\r\n        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        // Max chunk size is 32M.\r\n        if (currentSize * 2 < 32 * 1024 * 1024) {\r\n            this._chunkMultiplier *= 2;\r\n        }\r\n    }\r\n    _fetchMetadata() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\r\n            const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = metadataRequest;\r\n            metadataRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._metadataErrorHandler);\r\n        });\r\n    }\r\n    _oneShotUpload() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = multipartRequest;\r\n            multipartRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._updateProgress(this._blob.size());\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _updateProgress(transferred) {\r\n        const old = this._transferred;\r\n        this._transferred = transferred;\r\n        // A progress update can make the \"transferred\" value smaller (e.g. a\r\n        // partial upload not completed by server, after which the \"transferred\"\r\n        // value may reset to the value at the beginning of the request).\r\n        if (this._transferred !== old) {\r\n            this._notifyObservers();\r\n        }\r\n    }\r\n    _transition(state) {\r\n        if (this._state === state) {\r\n            return;\r\n        }\r\n        switch (state) {\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                if (this._request !== undefined) {\r\n                    this._request.cancel();\r\n                }\r\n                else if (this.pendingTimeout) {\r\n                    clearTimeout(this.pendingTimeout);\r\n                    this.pendingTimeout = undefined;\r\n                    this.completeTransitions_();\r\n                }\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                const wasPaused = this._state === \"paused\" /* InternalTaskState.PAUSED */;\r\n                this._state = state;\r\n                if (wasPaused) {\r\n                    this._notifyObservers();\r\n                    this._start();\r\n                }\r\n                break;\r\n            case \"paused\" /* InternalTaskState.PAUSED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"canceled\" /* InternalTaskState.CANCELED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._error = canceled();\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"error\" /* InternalTaskState.ERROR */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"success\" /* InternalTaskState.SUCCESS */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n        }\r\n    }\r\n    completeTransitions_() {\r\n        switch (this._state) {\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                break;\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                this._start();\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * A snapshot of the current task state.\r\n     */\r\n    get snapshot() {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        return {\r\n            bytesTransferred: this._transferred,\r\n            totalBytes: this._blob.size(),\r\n            state: externalState,\r\n            metadata: this._metadata,\r\n            task: this,\r\n            ref: this._ref\r\n        };\r\n    }\r\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type - The type of event to listen for.\r\n     * @param nextOrObserver -\r\n     *     The `next` function, which gets called for each item in\r\n     *     the event stream, or an observer object with some or all of these three\r\n     *     properties (`next`, `error`, `complete`).\r\n     * @param error - A function that gets called with a `StorageError`\r\n     *     if the event stream ends due to an error.\r\n     * @param completed - A function that gets called if the\r\n     *     event stream ends normally.\r\n     * @returns\r\n     *     If only the event argument is passed, returns a function you can use to\r\n     *     add callbacks (see the examples above). If more than just the event\r\n     *     argument is passed, returns a function you can call to unregister the\r\n     *     callbacks.\r\n     */\r\n    on(type, nextOrObserver, error, completed) {\r\n        // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\r\n        const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\r\n        this._addObserver(observer);\r\n        return () => {\r\n            this._removeObserver(observer);\r\n        };\r\n    }\r\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected - The rejection callback.\r\n     */\r\n    then(onFulfilled, onRejected) {\r\n        // These casts are needed so that TypeScript can infer the types of the\r\n        // resulting Promise.\r\n        return this._promise.then(onFulfilled, onRejected);\r\n    }\r\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\r\n    catch(onRejected) {\r\n        return this.then(null, onRejected);\r\n    }\r\n    /**\r\n     * Adds the given observer.\r\n     */\r\n    _addObserver(observer) {\r\n        this._observers.push(observer);\r\n        this._notifyObserver(observer);\r\n    }\r\n    /**\r\n     * Removes the given observer.\r\n     */\r\n    _removeObserver(observer) {\r\n        const i = this._observers.indexOf(observer);\r\n        if (i !== -1) {\r\n            this._observers.splice(i, 1);\r\n        }\r\n    }\r\n    _notifyObservers() {\r\n        this._finishPromise();\r\n        const observers = this._observers.slice();\r\n        observers.forEach(observer => {\r\n            this._notifyObserver(observer);\r\n        });\r\n    }\r\n    _finishPromise() {\r\n        if (this._resolve !== undefined) {\r\n            let triggered = true;\r\n            switch (taskStateFromInternalTaskState(this._state)) {\r\n                case TaskState.SUCCESS:\r\n                    async(this._resolve.bind(null, this.snapshot))();\r\n                    break;\r\n                case TaskState.CANCELED:\r\n                case TaskState.ERROR:\r\n                    const toCall = this._reject;\r\n                    async(toCall.bind(null, this._error))();\r\n                    break;\r\n                default:\r\n                    triggered = false;\r\n                    break;\r\n            }\r\n            if (triggered) {\r\n                this._resolve = undefined;\r\n                this._reject = undefined;\r\n            }\r\n        }\r\n    }\r\n    _notifyObserver(observer) {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        switch (externalState) {\r\n            case TaskState.RUNNING:\r\n            case TaskState.PAUSED:\r\n                if (observer.next) {\r\n                    async(observer.next.bind(observer, this.snapshot))();\r\n                }\r\n                break;\r\n            case TaskState.SUCCESS:\r\n                if (observer.complete) {\r\n                    async(observer.complete.bind(observer))();\r\n                }\r\n                break;\r\n            case TaskState.CANCELED:\r\n            case TaskState.ERROR:\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n                break;\r\n            default:\r\n                // TODO(andysoto): assert(false);\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n        }\r\n    }\r\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    resume() {\r\n        const valid = this._state === \"paused\" /* InternalTaskState.PAUSED */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"running\" /* InternalTaskState.RUNNING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    pause() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */;\r\n        if (valid) {\r\n            this._transition(\"pausing\" /* InternalTaskState.PAUSING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    cancel() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"canceling\" /* InternalTaskState.CANCELING */);\r\n        }\r\n        return valid;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\r\nclass Reference {\r\n    constructor(_service, location) {\r\n        this._service = _service;\r\n        if (location instanceof Location) {\r\n            this._location = location;\r\n        }\r\n        else {\r\n            this._location = Location.makeFromUrl(location, _service.host);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the URL for the bucket and path this object references,\r\n     *     in the form gs://<bucket>/<object-path>\r\n     * @override\r\n     */\r\n    toString() {\r\n        return 'gs://' + this._location.bucket + '/' + this._location.path;\r\n    }\r\n    _newRef(service, location) {\r\n        return new Reference(service, location);\r\n    }\r\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\r\n    get root() {\r\n        const location = new Location(this._location.bucket, '');\r\n        return this._newRef(this._service, location);\r\n    }\r\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\r\n    get bucket() {\r\n        return this._location.bucket;\r\n    }\r\n    /**\r\n     * The full path of this object.\r\n     */\r\n    get fullPath() {\r\n        return this._location.path;\r\n    }\r\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\r\n    get name() {\r\n        return lastComponent(this._location.path);\r\n    }\r\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\r\n    get storage() {\r\n        return this._service;\r\n    }\r\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\r\n    get parent() {\r\n        const newPath = parent(this._location.path);\r\n        if (newPath === null) {\r\n            return null;\r\n        }\r\n        const location = new Location(this._location.bucket, newPath);\r\n        return new Reference(this._service, location);\r\n    }\r\n    /**\r\n     * Utility function to throw an error in methods that do not accept a root reference.\r\n     */\r\n    _throwIfRoot(name) {\r\n        if (this._location.path === '') {\r\n            throw invalidRootOperation(name);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\r\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBytes');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBytesConnection)\r\n        .then(bytes => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            bytes.slice(0, maxDownloadSizeBytes)\r\n        : bytes);\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\r\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBlob');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBlobConnection)\r\n        .then(blob => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            blob.slice(0, maxDownloadSizeBytes)\r\n        : blob);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytes');\r\n    const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(finalMetadata => {\r\n        return {\r\n            metadata: finalMetadata,\r\n            ref\r\n        };\r\n    });\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytesResumable');\r\n    return new UploadTask(ref, new FbsBlob(data), metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\r\n    ref._throwIfRoot('uploadString');\r\n    const data = dataFromString(format, value);\r\n    const metadataClone = Object.assign({}, metadata);\r\n    if (metadataClone['contentType'] == null && data.contentType != null) {\r\n        metadataClone['contentType'] = data.contentType;\r\n    }\r\n    return uploadBytes$1(ref, data.data, metadataClone);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll$1(ref) {\r\n    const accumulator = {\r\n        prefixes: [],\r\n        items: []\r\n    };\r\n    return listAllHelper(ref, accumulator).then(() => accumulator);\r\n}\r\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\r\nasync function listAllHelper(ref, accumulator, pageToken) {\r\n    const opt = {\r\n        // maxResults is 1000 by default.\r\n        pageToken\r\n    };\r\n    const nextPage = await list$1(ref, opt);\r\n    accumulator.prefixes.push(...nextPage.prefixes);\r\n    accumulator.items.push(...nextPage.items);\r\n    if (nextPage.nextPageToken != null) {\r\n        await listAllHelper(ref, accumulator, nextPage.nextPageToken);\r\n    }\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list$1(ref, options) {\r\n    if (options != null) {\r\n        if (typeof options.maxResults === 'number') {\r\n            validateNumber('options.maxResults', \r\n            /* minValue= */ 1, \r\n            /* maxValue= */ 1000, options.maxResults);\r\n        }\r\n    }\r\n    const op = options || {};\r\n    const requestInfo = list$2(ref.storage, ref._location, \r\n    /*delimiter= */ '/', op.pageToken, op.maxResults);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retrieved, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\r\nfunction getMetadata$1(ref) {\r\n    ref._throwIfRoot('getMetadata');\r\n    const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\r\nfunction updateMetadata$1(ref, metadata) {\r\n    ref._throwIfRoot('updateMetadata');\r\n    const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL$1(ref) {\r\n    ref._throwIfRoot('getDownloadURL');\r\n    const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(url => {\r\n        if (url === null) {\r\n            throw noDownloadURL();\r\n        }\r\n        return url;\r\n    });\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject$1(ref) {\r\n    ref._throwIfRoot('deleteObject');\r\n    const requestInfo = deleteObject$2(ref.storage, ref._location);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\r\nfunction _getChild$1(ref, childPath) {\r\n    const newPath = child(ref._location.path, childPath);\r\n    const location = new Location(ref._location.bucket, newPath);\r\n    return new Reference(ref.storage, location);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\r\nfunction refFromURL(service, url) {\r\n    return new Reference(service, url);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\r\nfunction refFromPath(ref, path) {\r\n    if (ref instanceof FirebaseStorageImpl) {\r\n        const service = ref;\r\n        if (service._bucket == null) {\r\n            throw noDefaultBucket();\r\n        }\r\n        const reference = new Reference(service, service._bucket);\r\n        if (path != null) {\r\n            return refFromPath(reference, path);\r\n        }\r\n        else {\r\n            return reference;\r\n        }\r\n    }\r\n    else {\r\n        // ref is a Reference\r\n        if (path !== undefined) {\r\n            return _getChild$1(ref, path);\r\n        }\r\n        else {\r\n            return ref;\r\n        }\r\n    }\r\n}\r\nfunction ref$1(serviceOrRef, pathOrUrl) {\r\n    if (pathOrUrl && isUrl(pathOrUrl)) {\r\n        if (serviceOrRef instanceof FirebaseStorageImpl) {\r\n            return refFromURL(serviceOrRef, pathOrUrl);\r\n        }\r\n        else {\r\n            throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\r\n        }\r\n    }\r\n    else {\r\n        return refFromPath(serviceOrRef, pathOrUrl);\r\n    }\r\n}\r\nfunction extractBucket(host, config) {\r\n    const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\r\n    if (bucketString == null) {\r\n        return null;\r\n    }\r\n    return Location.makeFromBucketSpec(bucketString, host);\r\n}\r\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\r\n    storage.host = `${host}:${port}`;\r\n    storage._protocol = 'http';\r\n    const { mockUserToken } = options;\r\n    if (mockUserToken) {\r\n        storage._overrideAuthToken =\r\n            typeof mockUserToken === 'string'\r\n                ? mockUserToken\r\n                : createMockUserToken(mockUserToken, storage.app.options.projectId);\r\n    }\r\n}\r\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\r\nclass FirebaseStorageImpl {\r\n    constructor(\r\n    /**\r\n     * FirebaseApp associated with this StorageService instance.\r\n     */\r\n    app, _authProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _appCheckProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _url, _firebaseVersion) {\r\n        this.app = app;\r\n        this._authProvider = _authProvider;\r\n        this._appCheckProvider = _appCheckProvider;\r\n        this._url = _url;\r\n        this._firebaseVersion = _firebaseVersion;\r\n        this._bucket = null;\r\n        /**\r\n         * This string can be in the formats:\r\n         * - host\r\n         * - host:port\r\n         */\r\n        this._host = DEFAULT_HOST;\r\n        this._protocol = 'https';\r\n        this._appId = null;\r\n        this._deleted = false;\r\n        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\r\n        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\r\n        this._requests = new Set();\r\n        if (_url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(_url, this._host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(this._host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The host string for this service, in the form of `host` or\r\n     * `host:port`.\r\n     */\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(host) {\r\n        this._host = host;\r\n        if (this._url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(this._url, host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\r\n    get maxUploadRetryTime() {\r\n        return this._maxUploadRetryTime;\r\n    }\r\n    set maxUploadRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxUploadRetryTime = time;\r\n    }\r\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\r\n    get maxOperationRetryTime() {\r\n        return this._maxOperationRetryTime;\r\n    }\r\n    set maxOperationRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxOperationRetryTime = time;\r\n    }\r\n    async _getAuthToken() {\r\n        if (this._overrideAuthToken) {\r\n            return this._overrideAuthToken;\r\n        }\r\n        const auth = this._authProvider.getImmediate({ optional: true });\r\n        if (auth) {\r\n            const tokenData = await auth.getToken();\r\n            if (tokenData !== null) {\r\n                return tokenData.accessToken;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    async _getAppCheckToken() {\r\n        const appCheck = this._appCheckProvider.getImmediate({ optional: true });\r\n        if (appCheck) {\r\n            const result = await appCheck.getToken();\r\n            // TODO: What do we want to do if there is an error getting the token?\r\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\r\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\r\n            // the token (actual or dummy) to send requests.\r\n            return result.token;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\r\n    _delete() {\r\n        if (!this._deleted) {\r\n            this._deleted = true;\r\n            this._requests.forEach(request => request.cancel());\r\n            this._requests.clear();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n     * at the given Location.\r\n     */\r\n    _makeStorageReference(loc) {\r\n        return new Reference(this, loc);\r\n    }\r\n    /**\r\n     * @param requestInfo - HTTP RequestInfo object\r\n     * @param authToken - Firebase auth token\r\n     */\r\n    _makeRequest(requestInfo, requestFactory, authToken, appCheckToken, retry = true) {\r\n        if (!this._deleted) {\r\n            const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\r\n            this._requests.add(request);\r\n            // Request removes itself from set when complete.\r\n            request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\r\n            return request;\r\n        }\r\n        else {\r\n            return new FailRequest(appDeleted());\r\n        }\r\n    }\r\n    async makeRequestWithTokens(requestInfo, requestFactory) {\r\n        const [authToken, appCheckToken] = await Promise.all([\r\n            this._getAuthToken(),\r\n            this._getAppCheckToken()\r\n        ]);\r\n        return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\r\n    }\r\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.13.2\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\r\nfunction getBytes(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBytesInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytes$1(ref, data, metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString(ref, value, format, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadString$1(ref, value, format, metadata);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytesResumable$1(ref, data, metadata);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retrieved, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\r\nfunction getMetadata(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getMetadata$1(ref);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\r\nfunction updateMetadata(ref, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return updateMetadata$1(ref, metadata);\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list(ref, options) {\r\n    ref = getModularInstance(ref);\r\n    return list$1(ref, options);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll(ref) {\r\n    ref = getModularInstance(ref);\r\n    return listAll$1(ref);\r\n}\r\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getDownloadURL$1(ref);\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject(ref) {\r\n    ref = getModularInstance(ref);\r\n    return deleteObject$1(ref);\r\n}\r\nfunction ref(serviceOrRef, pathOrUrl) {\r\n    serviceOrRef = getModularInstance(serviceOrRef);\r\n    return ref$1(serviceOrRef, pathOrUrl);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction _getChild(ref, childPath) {\r\n    return _getChild$1(ref, childPath);\r\n}\r\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\r\nfunction getStorage(app = getApp(), bucketUrl) {\r\n    app = getModularInstance(app);\r\n    const storageProvider = _getProvider(app, STORAGE_TYPE);\r\n    const storageInstance = storageProvider.getImmediate({\r\n        identifier: bucketUrl\r\n    });\r\n    const emulator = getDefaultEmulatorHostnameAndPort('storage');\r\n    if (emulator) {\r\n        connectStorageEmulator(storageInstance, ...emulator);\r\n    }\r\n    return storageInstance;\r\n}\r\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\r\nfunction connectStorageEmulator(storage, host, port, options = {}) {\r\n    connectStorageEmulator$1(storage, host, port, options);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\r\nfunction getBlob(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBlobInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\r\nfunction getStream(ref, maxDownloadSizeBytes) {\r\n    throw new Error('getStream() is only supported by NodeJS builds');\r\n}\n\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    const app = container.getProvider('app').getImmediate();\r\n    const authProvider = container.getProvider('auth-internal');\r\n    const appCheckProvider = container.getProvider('app-check-internal');\r\n    return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\r\n}\r\nfunction registerStorage() {\r\n    _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\r\n    registerVersion(name, version, '');\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\r\nregisterStorage();\n\nexport { StorageError, StorageErrorCode, StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n//# sourceMappingURL=index.esm2017.js.map\n","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"10.14.1\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n"],"names":["CONSTANTS","assert","assertion","message","assertionError","Error","stringToByteArray$1","str","out","p","i","length","c","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","this","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","DecodeBase64StringError","constructor","super","arguments","name","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","e","console","error","deepCopy","value","deepExtend","target","source","Object","Date","getTime","prop","hasOwnProperty","getDefaultsFromGlobal","self","window","global","getGlobal","__FIREBASE_DEFAULTS__","getDefaults","process","defaultsJsonString","define_process_env_default","JSON","parse","getDefaultsFromEnvVariable","document","match","cookie","decoded","getDefaultsFromCookie","info","getDefaultEmulatorHostnameAndPort","productName","host","_a","_b","emulatorHosts","getDefaultEmulatorHost","separatorIndex","lastIndexOf","port","parseInt","substring","getDefaultAppConfig","config","Deferred","reject","resolve","promise","Promise","wrapCallback","callback","catch","createMockUserToken","token","projectId","uid","project","iat","sub","user_id","payload","assign","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","stringify","alg","type","isMobileCordova","test","navigator","FirebaseError","code","customData","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","PATTERN","_","key","replaceTemplate","fullMessage","jsonEval","decode","header","claims","signature","parts","split","contains","obj","call","safeGet","isEmpty","map","fn","contextObj","res","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","t","f","d","update","lengthMinusBlock","n","inbuf","digest","totalBits","j","errorPrefix","fnName","argName","stringLength","getModularInstance","_delegate","Component","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","getImmediate","options","optional","getComponent","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","delete","services","from","values","all","filter","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","LogLevel","levelStringToEnum","debug","DEBUG","verbose","VERBOSE","INFO","warn","WARN","ERROR","silent","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","now","toISOString","method","Logger","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","log","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","receiver","IDBTransaction","objectStoreNames","objectStore","wrap","wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","apply","unwrap","storeNames","tx","sort","transformCachableValue","done","unlisten","removeEventListener","complete","DOMException","addEventListener","cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","some","Proxy","IDBRequest","request","success","result","then","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","async","storeName","store","index","shift","oldTraps","PlatformLoggerServiceImpl","getPlatformInfoString","isVersionServiceProvider","library","version","logString","name$q","version$1","logger","name$p","name$o","name$n","name$m","name$l","name$k","name$j","name$i","name$h","name$g","name$f","name$e","name$d","name$c","name$b","name$a","name$9","name$8","name$7","name$6","name$5","name$4","name$3","name$2","name$1","PLATFORM_LOG_STRING","name$1$1","name$2$1","name$r","_apps","_serverApps","_components","_addComponent","app","logger$1","_registerComponent","componentName","serverApp","_getProvider","heartbeatController","triggerHeartbeat","ERROR_FACTORY","FirebaseAppImpl","_isDeleted","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","SDK_VERSION","initializeApp","rawConfig","existingApp","newApp","getApp","registerVersion","libraryKeyOrName","variant","libraryMismatch","versionMismatch","warning","STORE_NAME","dbPromise","getDbPromise","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","db","openDB","createObjectStore","originalErrorMessage","writeHeartbeatsToIndexedDB","heartbeatObject","put","computeKey","idbGetError","appId","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","agent","date","getUTCDateString","heartbeats","lastSentHeartbeatDate","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","getHeartbeatsHeader","heartbeatsToSend","unsentEntries","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","extractHeartbeatsForHeader","headerString","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","isIndexedDBAvailable","preExist","DB_CHECK_NAME","onsuccess","close","deleteDatabase","onupgradeneeded","onerror","idbHeartbeatObject","readHeartbeatsFromIndexedDB","heartbeatsObject","existingHeartbeatsObject","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","high","stringToByteArray","sha1Bytes","buildLogMessage_","varArgs","arg","firstLog_","bind","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","splitStringBySize","segsize","len","dataSegs","each","doubleToIEEE754String","v","bias","s","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","hexByteString","hexByte","substr","toLowerCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","FORGE_DOMAIN_RE","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","params","connURL","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called","wrappedFn","body","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","href","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","removeChild","send","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","onDisconnect2","myID","myPW","newRequest_","size","theURL","curDataString","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","newScript","onload","onreadystatechange","rstate","parentNode","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidRegex","oldAndroidMatch","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","handshakePayload","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","ServerActions","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","et","OnlineMonitor","online_","getInstance","currentlyOnline","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","outstandingGet","_path","q","_queryObject","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","tryAppCheck","authMethod","isValidFormat","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","left","right","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","root2","isOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","setMaxNode","nodeFromJSON","json","childData","children","childrenHavePriority","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","filtered","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasLimit","hasAnchoredLimit","queryParamsToRestQueryStringParameters","queryParams","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","getListenId_","listenId","thisListen","queryStringParameters","restRequest_","error2","querystringParams","forEach","arrayVal","encodeURIComponent","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","tree","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","EmptyChildren","fromObject","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","newViewCache2","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","serverChildren","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","View","initialViewCache","eventRegistrations_","indexFilter","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewIsEmpty","viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","viewAddEventRegistration","initialChanges","viewGetInitialEvents","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","record","writeTreeGetWrite","syncTreeApplyServerOverwrite","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","maybeChildSyncPoint","childMap","_key","childViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","removedQuery","removedQueryKey","removedQueryTag","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","queriesToStop","childQueries","queryToStop","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeGetServerValue","serverCacheNode","viewGetCompleteNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","viewGetServerCache","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","toUpperCase","errorForServerCode","splitIndex","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","op","unused","existingNode","resolveDeferredValueSnapshot","resolveDeferredValue","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","validateFirebaseData","hasDotValue","hasActualChild","last","validationPathPop","validatePathString","argumentName","validateUrl","parsedUrl","isValidRootPathString","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventFn","getEventRunner","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","serverSyncTree_","repoServerTime","repoGenerateServerValues","taggedChildren","raw","changeTree","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","resolveDeferredValueTree","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoSetWithPriority","newVal","newNodeUnresolved","clearEvents","repoCallOnCompleteCallback","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","repoGetAncestorTransactionNode","txnsToRerun","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","segment","kv","decodeQuery","hostWithoutPort","dotInd","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","pathToUrlEncodedString","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","_checkNotDeleted","_root","validateWritablePath","validateFirebaseDataArg","callbackContext","ValueEventRegistration","cached","err","repoGetValue","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","useRestClient","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","dbEmulatorHost","authTokenProvider","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","repoInterrupt","repoManagerDeleteRepo","apiName","getDatabase","emulator","tokenProvider","mockUserToken","repoManagerApplyEmulatorSettings","connectDatabaseEmulator","simpleListen","echo","onEcho","SDK_VERSION$1","registerDatabase","DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","StorageError","status_","prependCode","serverResponse","_baseMessage","_codeEquals","StorageErrorCode","ErrorCode","unknown","UNKNOWN","invalidArgument","INVALID_ARGUMENT","appDeleted","APP_DELETED","invalidFormat","format","INVALID_FORMAT","internalError","INTERNAL_ERROR","Location","bucket","isRoot","fullServerUrl","encode","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","bucketLocation","makeFromUrl","INVALID_DEFAULT_BUCKET","bucketDomain","gsRegex","httpModify","loc","firebaseStorageHost","groups","regex","indices","postModify","group","captures","exec","bucketValue","pathValue","INVALID_URL","invalidUrl","FailRequest","promise_","getPromise","cancel","_appDelete","isString","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","makeUrl","urlPart","origin","makeQueryString","queryPart","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","pendingConnection_","backoffId_","canceled_","appDelete_","resolve_","reject_","doTheRequest","backoffCallback","RequestEndStatus","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","additionalRetryCodes","isFiveHundredCode","isExtraRetryCode","isAdditionalRetryCode","isRetryStatusCode","wasCanceled","ABORT","successCode","backoffDone","requestWentThrough","wasSuccessCode","getResponse","getErrorText","CANCELED","RETRY_LIMIT_EXCEEDED","doRequest","backoffCompleteCb","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","callWithDelay","millis","responseHandler","clearGlobalTimeout","waitMillis","stopped","stop","wasTimeout","appDelete","abort","getBlob$1","BlobBuilder","WebKitBlobBuilder","bb","append","getBlob","UNSUPPORTED_ENVIRONMENT","decodeBase64","encoded","polyFill","StringFormat","StringData","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataUrl","DataURLParts","rest","percentEncodedBytes_","dataURLBytes_","Uint8Array","hasMinus","hasUnder","hasPlus","hasSlash","end","endsWith","FbsBlob","elideCopy","blobType","data_","ArrayBuffer","byteLength","size_","type_","startByte","endByte","realBlob","sliced","blob","webkitSlice","mozSlice","buffer","blobby","uint8Arrays","finalLength","merged","uploadData","jsonObjectOrNull","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","getMappings","mappings","nameMapping","_metadata","fullPath","xformPath","sizeMapping","fromResource","resource","mapping","defineProperty","_makeStorageReference","addRef","fromResourceString","resourceString","RequestInfo","handler","headers","errorHandler","progressCallback","successCodes","handlerCheck","cndn","downloadUrlHandler","text","tokens","alt","downloadUrlFromResourceString","_protocol","sharedErrorHandler","newErr","UNAUTHORIZED_APP","UNAUTHENTICATED","QUOTA_EXCEEDED","UNAUTHORIZED","objectErrorHandler","shared","OBJECT_NOT_FOUND","multipartUpload","boundary","genBoundary","metadata_","metadataClone","determineContentType_","metadataForUpload_","metadataString","toResourceString","preBlobPart","postBlobPart","CANNOT_SLICE_BLOB","maxUploadRetryTime","requestInfo","metadataHandler","XhrConnection","sent_","xhr_","initXhr","errorCode_","sendPromise_","NETWORK_ERROR","setRequestHeader","statusText","getResponseHeader","upload","XhrTextConnection","responseType","newTextConnection","Reference","_service","_location","_newRef","storage","newPath","_throwIfRoot","INVALID_ROOT_OPERATION","invalidRootOperation","getDownloadURL$1","maxOperationRetryTime","getDownloadUrl","makeRequestWithTokens","NO_DOWNLOAD_URL","refFromPath","FirebaseStorageImpl","_bucket","NO_DEFAULT_BUCKET","reference","canonicalChildPath","_getChild$1","ref$1","serviceOrRef","pathOrUrl","extractBucket","_authProvider","_appCheckProvider","_url","_firebaseVersion","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","_getAuthToken","_overrideAuthToken","tokenData","_getAppCheckToken","_makeRequest","requestFactory","firebaseVersion","addGmpidHeader_","addAuthHeader_","addVersionHeader_","addAppCheckHeader_","makeRequest","STORAGE_TYPE","uploadBytes","finalMetadata","uploadBytes$1","getDownloadURL","getStorage","bucketUrl","storageInstance","connectStorageEmulator$1","connectStorageEmulator","factory"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8]}